<?xml version="1.0" encoding="UTF-8"?>
<!--
    $Author: Mouse Chow  
    $Date: 2015年2月2日14:48:57  
    $Revision: 1.0  
    $Purpose: 
-->
<a:screen xmlns:c="aurora.application.action" xmlns:p="uncertain.proc" xmlns:a="http://www.aurora-framework.org/application" tag="exp_report" trace="true">
    <a:init-procedure>
        <a:model-query autoCount="false" fetchAll="true" model="expm.exp_report_head_show" rootPath="head_data"/>
        <a:model-query defaultWhereClause="expense_report_type_id=nvl(${/parameter/@expense_report_type_id},(select hh.exp_report_type_id from exp_report_headers hh where hh.exp_report_header_id=${/parameter/@exp_report_header_id}))" fetchAll="true" model="exp.exp_expense_report_types_vl" rootPath="budget_control"/>
        <a:model-query autoCount="false" defaultWhereClause="currency_code=${/model/head_data/record/@exp_report_currency_code}" fetchAll="true" model="gld.gld_currency_vl" rootPath="precision"/>
        <a:model-query autocount="false" fetchall="true" model="csh.csh_payment_methods_list" rootpath="payment_method_list"/>
        <a:model-query autocount="false" defaultwhereclause="exists (select 1 from exp_employee_assigns eea         where eea.position_id=op.position_id    and eea.enabled_flag = &apos;Y&apos;   and   eea.employee_id= nvl(${/parameter/@employee_id},${/model/head_data/record/@employee_id}))  and company_id = ${/session/@company_id}" fetchall="true" model="exp.exp_org_position" rootpath="position_list"/>
        <a:model-query autocount="false" fetchall="true" model="fnd.fnd_companies_set_of_books" rootpath="fnd_company_bm"/>
        <a:model-query autocount="false" fetchall="true" model="expm.exp_report_head_dimension" rootpath="head_dimension"/>
        <a:model-query autocount="false" fetchall="true" model="expm.exp_report_head_object" rootpath="head_object"/>
        <a:model-query autocount="false" defaultWhereClause="exists (select 1 from exp_rep_ref_dim_detail rdd where rdd.expense_report_type_id = vv.expense_report_type_id and rdd.dimension_id = vv.dimension_id and rdd.travel_line_category = &apos;TRANSPORTATION&apos; and rdd.enabled_flag = &apos;Y&apos;)" fetchall="true" model="expm.exp_report_line_dimension" rootpath="transportation_line_dimension"/>
        <a:model-query autocount="false" defaultWhereClause="exists (select 1 from exp_rep_ref_obj_detail rod where rod.expense_report_type_id = v.expense_report_type_id and rod.EXPENSE_OBJECT_TYPE_ID = v.expense_object_type_id and rod.travel_line_category = &apos;TRANSPORTATION&apos; and rod.enabled_flag = &apos;Y&apos;)" fetchall="true" model="expm.exp_report_line_object" rootpath="transportation_line_object"/>
        <a:model-query autocount="false" defaultWhereClause="exists (select 1 from exp_rep_ref_dim_detail rdd where rdd.expense_report_type_id = vv.expense_report_type_id and rdd.dimension_id = vv.dimension_id and rdd.travel_line_category = &apos;ACCOMMODATION&apos; and rdd.enabled_flag = &apos;Y&apos;)" fetchall="true" model="expm.exp_report_line_dimension" rootpath="accommodation_line_dimension"/>
        <a:model-query autocount="false" defaultWhereClause="exists (select 1 from exp_rep_ref_obj_detail rod where rod.expense_report_type_id = v.expense_report_type_id and rod.EXPENSE_OBJECT_TYPE_ID = v.expense_object_type_id and rod.travel_line_category = &apos;ACCOMMODATION&apos; and rod.enabled_flag = &apos;Y&apos;)" fetchall="true" model="expm.exp_report_line_object" rootpath="accommodation_line_object"/>
        <a:model-query autocount="false" defaultWhereClause="exists (select 1 from exp_rep_ref_dim_detail rdd where rdd.expense_report_type_id = vv.expense_report_type_id and rdd.dimension_id = vv.dimension_id and rdd.travel_line_category = &apos;OTHER&apos; and rdd.enabled_flag = &apos;Y&apos;)" fetchall="true" model="expm.exp_report_line_dimension" rootpath="other_line_dimension"/>
        <a:model-query autocount="false" defaultWhereClause="exists (select 1 from exp_rep_ref_obj_detail rod where rod.expense_report_type_id = v.expense_report_type_id and rod.EXPENSE_OBJECT_TYPE_ID = v.expense_object_type_id and rod.travel_line_category = &apos;OTHER&apos; and rod.enabled_flag = &apos;Y&apos;)" fetchall="true" model="expm.exp_report_line_object" rootpath="other_line_object"/>
        <a:model-query fetchAll="true" model="expm.expm_get_policy_enabled" rootpath="policy_enabled"/>
        <a:model-query autoCount="false" fetchAll="true" model="expm.exp_requisition_exchange_type_init" rootPath="exchange_type"/>
        <a:model-query autoCount="true" model="expm.exp_report_get_check_log_count" rootPath="check_log_count"/>
    </a:init-procedure>
    <a:view>
        <a:link id="uploadFile_link_10" url="${/request/@context_path}/uploadFile.screen"/>
        <a:link id="exp_report_query_history_link_6" url="${/request/@context_path}/modules/exp/public/exp_report_query_history.screen"/>
        <a:link id="exp_budget_check_log_link_9" url="${/request/@context_path}/modules/expm/public/exp_budget_check_log.screen"/>
        <a:link id="exp_report_fromreq_link" url="${/request/@context_path}/modules/expm/public/exp_report_fromreq.screen"/>
        <a:link id="exp_report_maintain_query_link_1" url="${/request/@context_path}/modules/expm/public/exp_report_maintain_query.screen"/>
        <a:link id="exp_report_submit_link" model="db.exp_report_pkg.submit_exp_report" modelaction="execute"/>
        <a:link id="exp_report_bgt_check_link" model="db.bgt_check_pkg.report_bgt_check" modelaction="execute"/>
        <a:link id="exp_report_bgt_check_with_cache_link" model="db.bgt_check_with_cache_pkg.report_bgt_check" modelaction="execute"/>
        <a:link id="exp_report_pmt_check_link" model="db.exp_report_pkg.report_pmt_check" modelaction="execute"/>
        <a:link id="get_exchange_rate_link_16" model="expm.get_exchange_rate" modelaction="query"/>
        <a:link id="get_exchange_rate_by_quotation_link" model="expm.get_exchange_rate_by_quotation" modelaction="query"/>
        <a:link id="exp_report_type_choice_link_1" url="${/request/@context_path}/modules/expm/public/exp_report_type_choice.screen"/>
        <a:link id="exp_report_delete_link_1" url="${/request/@context_path}/modules/expm/public/exp_report_delete.svc"/>
        <a:link id="exp_expense_policy_infoinit_link" model="expm.exp_expense_policy_infoinit" modelaction="update"/>
        <a:link id="sys_fun_get_period_name_link_5" model="csh.sys_fun_get_period_name" modelaction="query"/>
        <a:link id="sys_fun_get_period_name_link_6" model="csh.sys_fun_get_bgt_period_name" modelaction="query"/>
        <a:link id="sys_fun_get_payment_date_link" model="db.exp_report_pkg.get_payment_schedule_date" modelaction="execute"/>
        <a:link id="exp_prepayment_post_link_2" url="${/request/@context_path}/modules/expm/public/exp_prepayment_post.screen"/>
        <a:link id="exp_document_req_policy_query_link" url="${/request/@context_path}/modules/expm/public/exp_document_policy_query.screen"/>
        <a:link id="exp_bank_assign_link" url="${/request/@context_path}/modules/exp/EXP1050/exp_bank_assign_pmt_schedule.screen"/>
        <a:link id="from_travel_plan_link" url="${/request/@context_path}/modules/expm/public/exp_report_from_travel_plan.screen"/>
        <style><![CDATA[
            .accordion-box td{
                vertical-align:top;
            }
        ]]></style>
        <script><![CDATA[
            var lineNum = 0;
            var submitFlag = 0;
            var saveFlag = true; //保存标志(用在动态列)，默认当加载页面后是true（及保存状态）。当对页面上的东西进行改动后，保存标志变为false。此时必须要保存后才能提交。
            var initFlag = 1; //初始化标志，1：手动添加，2：从申请单创建，如果是从申请单创建，无需设置初始化数据
            var pmt_schedule_due_date;
            var index = 1;
            var transIndex = 1;
            var accomIndex = 1;
            var otherIndex = 1;
            var initTransLineIndex = 0;
            var initAccomLineIndex = 0;
            var initOtherLineIndex = 0;
            var exp_report_header_id_bak = '${/parameter/@exp_report_header_id}';
            
            var removeFlag = false;
            
            function pmtGridcellclick(grid, row, name, record) {
            
                var metadata = record.getMeta();
                if (name == 'payee_partner_name') {
                    var f1 = metadata.getField('payee_partner_name');
                    var payee_category = record.get('payee_type_value');
                    if (payee_category == null || payee_category == undefined || payee_category == '') {
                        f1.setLovService('');
                    } else if (payee_category == 'EMPLOYEE') {
                        f1.setLovService('csh.csh_pay_req_emp_lov');
                        // f1.setLovService('expm.exp_req_employee_lov');
                    } else if (payee_category == 'VENDER') {
                        // f1.setLovService('fnd.pur_system_venders');
                        f1.setLovService('csh.csh_pay_req_ven_lov');
                    } else {
                        // f1.setLovService('fnd.ord_system_customers');
                        f1.setLovService('csh.csh_pay_req_cus_lov');
                    }
                }
                if (name == 'line_number') {
                    var meta = record.getMeta();
                    var field = meta.getField('line_number');
                    if (!record.get('contract_header_id') || record.get('contract_header_id') == '') {
                        field.setLovService('');
                    } else {
                        field.setLovService('csh.csh_payment_schedule_lov');
                        field.setLovPara('contract_header_id', record.get('contract_header_id') || '');
                        field.setLovPara('currency_code', record.get('currency'));
                        field.setLovPara('partner_id', record.get('payee_id') || '');
                        field.setLovPara('partner_category1', record.get('payee_type_value') || '');
                    }
                }
                if (name == 'contract_number') {
                    var contractfield = record.getMeta().getField('contract_number');
                    contractfield.setLovPara('currency_code', record.get('currency'));
                    contractfield.setLovPara('partner_category', record.get('payee_type_value') || '');
                    contractfield.setLovPara('partner_id', record.get('payee_id') || '');
                    contractfield.setLovPara('company_id', record.get('company_id') || '');
                }
                if (name == 'account_number') {
                    var r = record.getMeta();
                    var f1 = r.getField('account_number');
                    var payee_category = record.get('payee_type_value');
                    if (payee_category == null || payee_category == undefined || payee_category == '') {
                        f1.setLovService('');
                    } else if (payee_category == 'EMPLOYEE') {
                        f1.setLovService('expm.exp_employee_accounts');
                        record.getMeta().getField('account_number').setLovPara('employee_id', record.get('payee_id'));
                    } else if (payee_category == 'VENDER') {
                        f1.setLovService('expm.pur_vender_accounts');
                        record.getMeta().getField('account_number').setLovPara('vender_id', record.get('payee_id'));
                    } else {
                        f1.setLovService('expm.ord_customer_accounts');
                        record.getMeta().getField('account_number').setLovPara('customer_id', record.get('payee_id'));
                        //record.getMeta().getField('account_number').setLovPara('id', record.get('partner_id'));
                    }
                }
            }
            
            function transportation_gridcellclick(grid, row, name, record) {
                var metadata = record.getMeta();
                if (name == 'expense_type_name') {
                    $('exp_expense_type_ds').setQueryParameter('company_id', record.get('company_id'));
                    $('exp_expense_type_ds').query();
                } else if (name == 'exp_req_item_name') {
                    $('exp_expense_item_ds').setQueryParameter('company_id', record.get('company_id'));
                    $('exp_expense_item_ds').setQueryParameter('expense_type_id', record.get('expense_type_id'));
                    $('exp_expense_item_ds').setQueryParameter('exp_report_header_id', '${/parameter/@exp_report_header_id}');
                    $('exp_expense_item_ds').setQueryParameter('exp_report_type_id', '${/model/head_data/record/@exp_report_type_id}');
                    $('exp_expense_item_ds').setQueryParameter('item_category', 'TRAVEL_ROUTE');
                    $('exp_expense_item_ds').query();
                } else if (name == 'unit_name') {
                    var r = record.getMeta();
                    var f1 = r.getField('unit_name');
                    f1.setLovPara('company_id', record.get('company_id'));
                } else if (name == 'responsibility_center_name') {
                    var r = record.getMeta();
                    var f1 = r.getField('responsibility_center_name');
                    f1.setLovPara('company_id', record.get('company_id'));
                } else if (name == 'employee_name') {
                    var r = record.getMeta();
                    var f1 = r.getField('employee_name');
                    var ds = $('exp_report_head');
                    var rd = ds.getAt(0);
                    f1.setLovPara('company_id', record.get('company_id'));
                    f1.setLovPara('employee_id', rd.get('employee_id'));
                } else if (name == 'position_name') {
                    $('travel_postion_ds').setQueryParameter('company_id', record.get('company_id'));
                    $('travel_postion_ds').setQueryParameter('employee_id', record.get('employee_id'));
                    $('travel_postion_ds').query();
                } else if (name == 'period_name') {
                    var meta = record.getMeta();
                    var field = meta.getField('period_name');
                    if ('${/model/budget_control/record/@budget_control_enabled}' == 'N') {
                        field.setLovService('bgt.bgt_periods_detail_lov');
                    } else {
                        field.setLovService('expm.bgt_periods_detail_lov');
                    }
                } else if (/^d\d+$/g.test(name)) {
                    //如果是维度数据，设置公司ID的过滤条件
                    var field = record.getMeta().getField(name).setLovPara('company_id', record.get('company_id'));
                }
            }
            
            function accommodation_gridcellclick(grid, row, name, record) {
                var metadata = record.getMeta();
                if (name == 'expense_type_name') {
                    $('exp_expense_type_ds').setQueryParameter('company_id', record.get('company_id'));
                    $('exp_expense_type_ds').query();
                } else if (name == 'exp_req_item_name') {
                    $('exp_expense_item_ds').setQueryParameter('company_id', record.get('company_id'));
                    $('exp_expense_item_ds').setQueryParameter('expense_type_id', record.get('expense_type_id'));
                    $('exp_expense_item_ds').setQueryParameter('exp_report_header_id', '${/parameter/@exp_report_header_id}');
                    $('exp_expense_item_ds').setQueryParameter('exp_report_type_id', '${/model/head_data/record/@exp_report_type_id}');
                    $('exp_expense_item_ds').setQueryParameter('item_category', 'QUARTER');
                    $('exp_expense_item_ds').query();
                } else if (name == 'unit_name') {
                    var r = record.getMeta();
                    var f1 = r.getField('unit_name');
                    f1.setLovPara('company_id', record.get('company_id'));
                } else if (name == 'responsibility_center_name') {
                    var r = record.getMeta();
                    var f1 = r.getField('responsibility_center_name');
                    f1.setLovPara('company_id', record.get('company_id'));
                } else if (name == 'employee_name') {
                    var r = record.getMeta();
                    var f1 = r.getField('employee_name');
                    var ds = $('exp_report_head');
                    var rd = ds.getAt(0);
                    f1.setLovPara('company_id', record.get('company_id'));
                    f1.setLovPara('employee_id', rd.get('employee_id'));
                } else if (name == 'position_name') {
                    $('travel_postion_ds').setQueryParameter('company_id', record.get('company_id'));
                    $('travel_postion_ds').setQueryParameter('employee_id', record.get('employee_id'));
                    $('travel_postion_ds').query();
                } else if (name == 'period_name') {
                    var meta = record.getMeta();
                    var field = meta.getField('period_name');
                    if ('${/model/budget_control/record/@budget_control_enabled}' == 'N') {
                        field.setLovService('bgt.bgt_periods_detail_lov');
                    } else {
                        field.setLovService('expm.bgt_periods_detail_lov');
                    }
                } else if (/^d\d+$/g.test(name)) {
                    //如果是维度数据，设置公司ID的过滤条件
                    var field = record.getMeta().getField(name).setLovPara('company_id', record.get('company_id'));
                }
            }
            
            function other_gridcellclick(grid, row, name, record) {
                var metadata = record.getMeta();
                if (name == 'expense_type_name') {
                    $('exp_expense_type_ds').setQueryParameter('company_id', record.get('company_id'));
                    $('exp_expense_type_ds').query();
                } else if (name == 'exp_req_item_name') {
                    $('exp_expense_item_ds').setQueryParameter('company_id', record.get('company_id'));
                    $('exp_expense_item_ds').setQueryParameter('expense_type_id', record.get('expense_type_id'));
                    $('exp_expense_item_ds').setQueryParameter('exp_report_header_id', '${/parameter/@exp_report_header_id}');
                    $('exp_expense_item_ds').setQueryParameter('exp_report_type_id', '${/model/head_data/record/@exp_report_type_id}');
                    $('exp_expense_item_ds').setQueryParameter('item_category', 'OTHERS');
                    $('exp_expense_item_ds').query();
                } else if (name == 'unit_name') {
                    var r = record.getMeta();
                    var f1 = r.getField('unit_name');
                    f1.setLovPara('company_id', record.get('company_id'));
                } else if (name == 'responsibility_center_name') {
                    var r = record.getMeta();
                    var f1 = r.getField('responsibility_center_name');
                    f1.setLovPara('company_id', record.get('company_id'));
                } else if (name == 'employee_name') {
                    var r = record.getMeta();
                    var f1 = r.getField('employee_name');
                    var ds = $('exp_report_head');
                    var rd = ds.getAt(0);
                    f1.setLovPara('company_id', record.get('company_id'));
                    f1.setLovPara('employee_id', rd.get('employee_id'));
                } else if (name == 'position_name') {
                    $('travel_postion_ds').setQueryParameter('company_id', record.get('company_id'));
                    $('travel_postion_ds').setQueryParameter('employee_id', record.get('employee_id'));
                    $('travel_postion_ds').query();
                } else if (name == 'period_name') {
                    var meta = record.getMeta();
                    var field = meta.getField('period_name');
                    if ('${/model/budget_control/record/@budget_control_enabled}' == 'N') {
                        field.setLovService('bgt.bgt_periods_detail_lov');
                    } else {
                        field.setLovService('expm.bgt_periods_detail_lov');
                    }
                } else if (/^d\d+$/g.test(name)) {
                    //如果是维度数据，设置公司ID的过滤条件
                    var field = record.getMeta().getField(name).setLovPara('company_id', record.get('company_id'));
                }
            }
            
            function headcommitpayee(lov, r1, r2) {
            
                var payee_category = r1.get('exp_report_payee_category')
                if (payee_category == null || payee_category == undefined || payee_category == '') {
                    return;
                } else if (payee_category == 'EMPLOYEE') {
                    r1.set('exp_report_payee_id', r2.get('employee_id'));
                } else if (payee_category == 'VENDER') {
                    r1.set('exp_report_payee_id', r2.get('vender_id'));
                } else {
                    r1.set('exp_report_payee_id', r2.get('customer_id'));
                }
            }
            
            function pmtlineupdate(dataSet, record, name, value, oldvalue) {
                save = false;
                if (name == 'payee_type') {
                    record.set('payee_partner_name', '');
                    record.set('payee_id', '');
                    record.set('account_number', '');
                    record.set('account_name', '');
                    record.set('bank_code', '');
                    record.set('bank_name', '');
                    record.set('bank_location_code', '');
                    record.set('bank_location_name', '');
                    record.set('province_code', '');
                    record.set('province_name', '');
                    record.set('city_code', '');
                    record.set('city_name', '');
                } else if (name == 'payee_partner_name') {
                    if (value == '') {
                        record.set('payee_id', '');
                    }
                }
                if (name == 'contract_header_id' || name == 'payee_type' || name == 'payee_partner_name') {
                    if (name == 'payee_type' || name == 'payee_partner_name') {
                        record.set('contract_number', '');
                        record.set('contract_header_id', '');
                    }
                    record.set('payment_sch_line_id', '');
                    record.set('line_number', '');
                }
            }
            
            function rendererPrimPosition(value, record, name) {
                if (record.get('position_primary') == null) {
                    return value;
                } else {
                    record.set('position_name', record.get('position_primary'));
                    record.set('position_id', record.get('position_id'));
                    return value;
                }
            
            
            }
            
            function lineupdate(dataSet, record, name, value, oldvalue) {
                save = false;
                if (name == 'company_name') {
                    record.set('unit_id', '');
                    record.set('unit_name', '');
                    record.set('responsibility_center_id', '');
                    record.set('responsibility_center_name', '');
                    record.set('position_id', '');
                    record.set('position_name', '');
                    record.set('employee_id', '');
                    record.set('employee_name', '');
                    record.set('exp_req_item_id', '');
                    record.set('exp_req_item_name', '');
                    record.set('expense_type_name', '');
                    record.set('expense_type_id', '');
                    if (record.get('flag') == 1) {
                        record.set('d1', '');
                        record.set('d2', '');
                        record.set('d3', '');
                        record.set('d4', '');
                        record.set('d5', '');
                        record.set('d6', '');
                        record.set('d7', '');
                        record.set('d8', '');
                        record.set('d9', '');
                        record.set('d10', '');
                        record.set('d11', '');
                    }
                    record.set('flag', 1);
                    return;
                } else if (name == 'expense_type_name') {
                    record.set('exp_req_item_name', '');
                    record.set('exp_req_item_id', '');
                } else if (name == 'employee_name' || name == 'employee_id') {
                    record.set('position_id', '');
                    record.set('position_name', '');
                    return;
                } else if (name == 'primary_quantity' || name == 'price') {
                    var quotation = $('exp_report_head').getAt(0).get('exp_report_rate_quotation');
                    var a = record.get('primary_quantity');
            
                    var b = record.get('price');
                    if (quotation == 'DIRECT QUOTATION') {
                        record.set('report_amount', isNaN(a * b) ? '' : (a * b).toFixed('${/model/precision/record/@precision}'));
                    } else {
                        record.set('report_amount', isNaN(a / b) ? '' : (a * b).toFixed('${/model/precision/record/@precision}'));
                    }
                    headAmountChanged();
                    return;
            
                } else if (name == 'accommodation_date_from' || name == 'accommodation_date_to') {
                    record.validate((name == 'accommodation_date_from') ? 'accommodation_date_from' : 'accommodation_date_to');
                }
                if (name == 'contract_header_id' || name == 'payee_category_name' || name == 'payee_name') {
                    if (name == 'payee_category_name' || name == 'payee_name') {
                        record.set('contract_header_code', '');
                        record.set('contract_header_id', '');
                    }
                    record.set('payment_schedule_line_id', '');
                    record.set('payment_schedule_line_code', '');
                }
            
                if (name == 'city' || name == 'place_type_id' || name == 'place_id' || name == 'exp_req_item_id' || name == 'position_id') {
                    lineInfoInit(record);
                }
            }
            
            function headAmountChanged() {
                var lineAmount = 0;
                //行程行金額累加
                var transportation_records = $('transportation_exp_report_lines').getAll();
                for (var i = 0;i < transportation_records.length;i++) {
                    if (isNaN(transportation_records[i].get('report_amount'))) {
                        transportation_records[i].set('report_amount', '0')
                    }
                    var req_amount = parseFloat(transportation_records[i].get('report_amount'));
                    lineAmount += req_amount;
                }
                //住宿行金額累加
                var accommodation_records = $('accommodation_exp_report_lines').getAll();
                for (var i = 0;i < accommodation_records.length;i++) {
                    if (isNaN(accommodation_records[i].get('report_amount'))) {
                        accommodation_records[i].set('report_amount', '0')
                    }
                    var req_amount = parseFloat(accommodation_records[i].get('report_amount'));
                    lineAmount += req_amount;
                }
                //其他行金額累加
                var other_records = $('other_exp_report_lines').getAll();
                for (var i = 0;i < other_records.length;i++) {
                    if (isNaN(other_records[i].get('report_amount'))) {
                        other_records[i].set('report_amount', '0')
                    }
                    var req_amount = parseFloat(other_records[i].get('report_amount'));
                    lineAmount += req_amount;
                }
                $('exp_report_head').getAt(0).set('sum_amount', lineAmount);
            
                var report_sum = $('exp_report_head').getCurrentRecord().get('sum_amount');
                if (report_sum != 0 && report_sum != null) {
                    // 如果报销单只有一行计划付款行
                    // 设置报销单行信息报销金额改变时联动改变报销单计划付款行信息金额
                    if ($('pmtplan_schedules_ds').getAll().length == 1) {
                        $('pmtplan_schedules_ds').getCurrentRecord().set('due_amount', report_sum);
                    }
                }
            }
            
            function removeTransLine() {
                headAmountChanged();
                transIndex = transIndex - 1;
            }
            
            function removeAccomLine() {
                headAmountChanged();
                accomIndex = accomIndex - 1;
            }
            
            function removeOtherLine() {
                headAmountChanged();
                otherIndex = otherIndex - 1;
            }
            
            function lineInfoInit(record) {
                if (record.get('employee_id')) {
                    record.set('p_rep_date', $('exp_report_head').getAt(0).get('exp_report_data'), true);
                    record.set('expense_item_id', record.get('exp_req_item_id'), true);
                    Aurora.request({lockMessage:'${l:HAP_WAITING}',lockMessage:'${l:HAP_WAITING}',
                        url: $('exp_expense_policy_infoinit_link').getUrl(),
                        para: record.data,
                        success: function(res) {
                            var lineinfo = res.result;
                            record.set('p_upper_limit', lineinfo['p_upper_limit'], true);
                            record.set('p_lower_limit', lineinfo['p_lower_limit'], true);
                            if (lineinfo['p_count'] == 1) {
                                record.set('p_event_name', lineinfo['p_event_name'], true);
                                record.set('p_commit_flag', lineinfo['p_commit_flag'], true);
                                record.set('p_changeable_flag', lineinfo['p_changeable_flag'], true);
                                record.set('p_id', lineinfo['p_id'], true);
                                if (record.get('p_changeable_flag') && record.get('p_changeable_flag') == 'N') {
                                    if (lineinfo['p_default_flag'] == 'Y' && record.isNew) {
                                        record.set('price', lineinfo['p_expense_standard'], true);
                                    }
                                }
                            } else {
                                record.set('p_changeable_flag', lineinfo['p_changeable_flag'], true);
                            }
                            if (record.get('p_changeable_flag') && record.get('p_changeable_flag') == 'N') {
                                record.getMeta().getField('price').setReadOnly(true);
                            } else {
                                record.getMeta().getField('price').setReadOnly(false);
                            }
                        },
                        scope: this
                    });
                }
            }
            
            function createTransportationLineRecord() {
                if (!$('exp_report_head').validate()) {
                    return;
                }
                var ds = $('transportation_exp_report_lines');
                var linerecord = ds.getSelected();
                var lineIndex = transIndex + initTransLineIndex;
                if (linerecord.length == 0) {
                    ds.create();
            
                    var records = ds.getAll();
            
                    for (i = 0;i < records.length - 1;i++) {
                        records[i].set('flag', 1);
                    }
                    var lrecord = ds.getAt(lineIndex - 1);
                    setTransportationInitdata(ds, lrecord, lineIndex);
                } else {
                    for (i = 0;i < linerecord.length;i++) {
                        var data = linerecord[i].data;
                        var newdata = {};
                        var len = ds.getAll().length;
                        for (var name in data) {
                            newdata[name] = data[name];
                        }
                        var record = new Aurora.Record(newdata);
                        record.isNew = 'true';
                        record.dirty = 'false';
                        var reportAmount = record.data['report_amount'];
                        record.data['report_amount'] = 0;
                        ds.add(record);
                        record.set('report_amount', reportAmount);
                        lineNum = (transIndex + initTransLineIndex) * 10;
                        var lineRecord = ds.getAt(len);
                        lineRecord.set('line_number', lineNum);
                        lineRecord.set('exp_report_line_id', '');
                        transIndex = transIndex + 1;
                    }
                }
                headAmountChanged();
            }
            
            function createAccommodationLineRecord() {
                if (!$('exp_report_head').validate()) {
                    return;
                }
                var ds = $('accommodation_exp_report_lines');
                var linerecord = ds.getSelected();
                var lineIndex = accomIndex + initAccomLineIndex;
                if (linerecord.length == 0) {
                    ds.create();
            
                    var records = ds.getAll();
            
                    for (i = 0;i < records.length - 1;i++) {
                        records[i].set('flag', 1);
                    }
                    var lrecord = ds.getAt(lineIndex - 1);
                    setAccommodationInitdata(ds, lrecord, lineIndex);
                } else {
                    for (i = 0;i < linerecord.length;i++) {
                        var data = linerecord[i].data;
                        var newdata = {};
                        var len = ds.getAll().length;
                        for (var name in data) {
                            newdata[name] = data[name];
                        }
                        var record = new Aurora.Record(newdata);
                        record.isNew = 'true';
                        record.dirty = 'false';
                        var reportAmount = record.data['report_amount'];
                        record.data['report_amount'] = 0;
                        ds.add(record);
                        record.set('report_amount', reportAmount);
                        lineNum = (accomIndex + initAccomLineIndex) * 10 + 5;
                        var lineRecord = ds.getAt(len);
                        lineRecord.set('line_number', lineNum);
                        lineRecord.set('exp_report_line_id', '');
                        accomIndex = accomIndex + 1;
                    }
                }
                headAmountChanged();
            }
            
            function createOtherLineRecord() {
                if (!$('exp_report_head').validate()) {
                    return;
                }
                var ds = $('other_exp_report_lines');
                var linerecord = ds.getSelected();
                var lineIndex = otherIndex + initOtherLineIndex;
                if (linerecord.length == 0) {
                    ds.create();
            
                    var records = ds.getAll();
            
                    for (i = 0;i < records.length - 1;i++) {
                        records[i].set('flag', 1);
                    }
                    var lrecord = ds.getAt(lineIndex - 1);
                    setOtherInitdata(ds, lrecord, lineIndex);
                } else {
                    for (i = 0;i < linerecord.length;i++) {
                        var data = linerecord[i].data;
                        var newdata = {};
                        var len = ds.getAll().length;
                        for (var name in data) {
                            newdata[name] = data[name];
                        }
                        var record = new Aurora.Record(newdata);
                        record.isNew = 'true';
                        record.dirty = 'false';
                        var reportAmount = record.data['report_amount'];
                        record.data['report_amount'] = 0;
                        ds.add(record);
                        record.set('report_amount', reportAmount);
                        lineNum = (otherIndex + initOtherLineIndex) * 10 + 8;
                        var lineRecord = ds.getAt(len);
                        lineRecord.set('line_number', lineNum);
                        lineRecord.set('exp_report_line_id', '');
                        otherIndex = otherIndex + 1;
                    }
                }
                headAmountChanged();
            }
            
            //新增计划付款行时设置初始化数据
            
            function setpmtinitdata(ds, record, index) {
                var header = $('exp_report_head').getAt(0);
                var payee_category = header.get('exp_report_payee_category');
                record.set('currency', header.get('exp_report_currency_code'));
                record.set('schedule_start_date', header.get('exp_report_data'));
                record.set('schedule_due_date', pmt_schedule_due_date);
                record.set('currency_name', header.get('exp_report_currency_name'));
                record.set('exp_report_header_id', header.get('exp_report_header_id'));
                record.set('usedes', header.get('usedes'));
                record.set('usedes_name', header.get('usedes_name'));
                record.set('payee_type', header.get('exp_report_payee_category_name'));
                record.set('payee_type_value', header.get('exp_report_payee_category'));
                record.set('payee_partner_name', header.get('exp_report_payee_name'));
                record.set('payee_id', header.get('exp_report_payee_id'));
                record.set('account_number', header.get('account_number'));
                record.set('account_name', header.get('account_name'));
                record.set('bank_code', header.get('bank_code'));
                record.set('bank_name', header.get('bank_name'));
                record.set('bank_location_code', header.get('bank_location_code'));
                record.set('bank_location_name', header.get('bank_location'));
                record.set('province_code', header.get('province_code'));
                record.set('province_name', header.get('province_name'));
                record.set('city_code', header.get('city_code'));
                record.set('city_name', header.get('city_name'));
            
                record.set('payment_method', header.get('exp_report_payment_method'));
                record.set('payment_type_id', header.get('payment_method_id'));
            }
            
            //新增行程行时设置初始化数据
            
            function setTransportationInitdata(dataSet, record, lineIndex) {
                if (initFlag == 2) return;
                var header = $('exp_report_head').getAt(0);
                var selectedLines = $('transportation_exp_report_lines').getSelected();
            
                var payee_category = header.get('exp_report_payee_category');
                var records = $('exp_report_head').getAll();
                if ($('transportation_exp_report_lines').getAll().length != 0) {
                    lineNum = lineIndex * 10;
                    record.set('line_number', lineNum);
                    transIndex = transIndex + 1;
                }
                record.set('primary_quantity', 1);
                record.set('company_id', header.get('company_id'));
                record.set('company_name', header.get('company_name'));
                record.set('unit_id', header.get('unit_id'));
                record.set('unit_name', header.get('unit_name'));
                record.set('employee_id', header.get('employee_id'));
                record.set('employee_name', header.get('employee_name'));
                record.set('position_id', header.get('position_id'));
                record.set('position_name', header.get('position_name'));
                record.set('responsibility_center_name', header.get('responsibility_center_name'));
                record.set('responsibility_center_id', header.get('responsibility_center_id'));
                record.set('payee_category_name', header.get('exp_report_payee_category_name'));
                record.set('payee_category', header.get('exp_report_payee_category'));
                record.set('payee_name', header.get('exp_report_payee_name'));
                record.set('payee_id', header.get('exp_report_payee_id'));
                record.set('payment_flag', header.get('payment_flag'));
                record.set('currency_code', header.get('exp_report_currency_code'));
                record.set('exchange_rate', header.get('exp_report_rate'));
                record.set('period_name', header.get('period_name'));
                record.set('exchange_rate_type', header.get('exp_report_rate_type'));
                record.set('exchange_rate_quotation', header.get('exp_report_rate_quotation'));
                record.set('account_number', header.get('account_number'));
                record.set('account_name', header.get('account_name'));
                record.set('payment_type', header.get('exp_report_payment_method'));
                record.set('payment_type_id', header.get('payment_method_id'));
                record.set('expense_type_id', '${/model/budget_control/record/@default_expense_type}');
                record.set('expense_type_name', '${/model/budget_control/record/@default_expense_type_desc}');
            
                record.set('exp_req_item_id', '${/model/budget_control/record/@default_trans_item}');
                record.set('exp_req_item_name', '${/model/budget_control/record/@default_trans_item_desc}');
            
                var saveFlag = true;
            }
            
            //新增住宿行时设置初始化数据
            //住宿行行号以 5 结尾
            
            function setAccommodationInitdata(dataSet, record, lineIndex) {
                if (initFlag == 2) return;
                var header = $('exp_report_head').getAt(0);
                var selectedLines = $('accommodation_exp_report_lines').getSelected();
            
                var payee_category = header.get('exp_report_payee_category');
                var records = $('exp_report_head').getAll();
                if ($('accommodation_exp_report_lines').getAll().length != 0) {
                    lineNum = lineIndex * 10 + 5;
                    record.set('line_number', lineNum);
                    accomIndex = accomIndex + 1;
                }
                record.set('primary_quantity', 1);
                record.set('company_id', header.get('company_id'));
                record.set('company_name', header.get('company_name'));
                record.set('unit_id', header.get('unit_id'));
                record.set('unit_name', header.get('unit_name'));
                record.set('employee_id', header.get('employee_id'));
                record.set('employee_name', header.get('employee_name'));
                record.set('position_id', header.get('position_id'));
                record.set('position_name', header.get('position_name'));
                record.set('responsibility_center_name', header.get('responsibility_center_name'));
                record.set('responsibility_center_id', header.get('responsibility_center_id'));
                record.set('payee_category_name', header.get('exp_report_payee_category_name'));
                record.set('payee_category', header.get('exp_report_payee_category'));
                record.set('payee_name', header.get('exp_report_payee_name'));
                record.set('payee_id', header.get('exp_report_payee_id'));
                record.set('payment_flag', header.get('payment_flag'));
                record.set('currency_code', header.get('exp_report_currency_code'));
                record.set('exchange_rate', header.get('exp_report_rate'));
                record.set('period_name', header.get('period_name'));
                record.set('exchange_rate_type', header.get('exp_report_rate_type'));
                record.set('exchange_rate_quotation', header.get('exp_report_rate_quotation'));
                record.set('account_number', header.get('account_number'));
                record.set('account_name', header.get('account_name'));
                record.set('payment_type', header.get('exp_report_payment_method'));
                record.set('payment_type_id', header.get('payment_method_id'));
                record.set('expense_type_id', '${/model/budget_control/record/@default_expense_type}');
                record.set('expense_type_name', '${/model/budget_control/record/@default_expense_type_desc}');
            
                record.set('exp_req_item_id', '${/model/budget_control/record/@default_accomm_item}');
                record.set('exp_req_item_name', '${/model/budget_control/record/@default_accomm_item_desc}');
            
                var saveFlag = true;
            }
            
            //新增其他行时设置初始化数据
            //其他行行号以8结尾
            
            function setOtherInitdata(dataSet, record, lineIndex) {
                if (initFlag == 2) return;
                var header = $('exp_report_head').getAt(0);
                var selectedLines = $('other_exp_report_lines').getSelected();
            
                var payee_category = header.get('exp_report_payee_category');
                var records = $('exp_report_head').getAll();
                if ($('other_exp_report_lines').getAll().length != 0) {
                    lineNum = lineIndex * 10 + 8;
                    record.set('line_number', lineNum);
                    otherIndex = otherIndex + 1;
                }
                record.set('primary_quantity', 1);
                record.set('company_id', header.get('company_id'));
                record.set('company_name', header.get('company_name'));
                record.set('unit_id', header.get('unit_id'));
                record.set('unit_name', header.get('unit_name'));
                record.set('employee_id', header.get('employee_id'));
                record.set('employee_name', header.get('employee_name'));
                record.set('position_id', header.get('position_id'));
                record.set('position_name', header.get('position_name'));
                record.set('responsibility_center_name', header.get('responsibility_center_name'));
                record.set('responsibility_center_id', header.get('responsibility_center_id'));
                record.set('payee_category_name', header.get('exp_report_payee_category_name'));
                record.set('payee_category', header.get('exp_report_payee_category'));
                record.set('payee_name', header.get('exp_report_payee_name'));
                record.set('payee_id', header.get('exp_report_payee_id'));
                record.set('payment_flag', header.get('payment_flag'));
                record.set('currency_code', header.get('exp_report_currency_code'));
                record.set('exchange_rate', header.get('exp_report_rate'));
                record.set('period_name', header.get('period_name'));
                record.set('exchange_rate_type', header.get('exp_report_rate_type'));
                record.set('exchange_rate_quotation', header.get('exp_report_rate_quotation'));
                record.set('account_number', header.get('account_number'));
                record.set('account_name', header.get('account_name'));
                record.set('payment_type', header.get('exp_report_payment_method'));
                record.set('payment_type_id', header.get('payment_method_id'));
                record.set('expense_type_id', '${/model/budget_control/record/@default_expense_type}');
                record.set('expense_type_name', '${/model/budget_control/record/@default_expense_type_desc}');
            
                record.set('exp_req_item_id', '${/model/budget_control/record/@default_others_item}');
                record.set('exp_req_item_name', '${/model/budget_control/record/@default_others_item_desc}');
            
                var saveFlag = true;
            }
            
            function savereport() {
                //添加费用政策地点定义检查
                //行程行费用政策地点定义检查
                var records = $('transportation_exp_report_lines').getAll();
                var len = records.length;
                for (var i = 0;i < len;i++) {
                    lineInfoInit(records[i]);
                }
                //住宿行费用政策地点定义检查
                records = $('accommodation_exp_report_lines').getAll();
                var len = records.length;
                for (var i = 0;i < len;i++) {
                    lineInfoInit(records[i]);
                }
                //其他行费用政策地点定义检查
                records = $('other_exp_report_lines').getAll();
                var len = records.length;
                for (var i = 0;i < len;i++) {
                    lineInfoInit(records[i]);
                }
            
                var d1 = $('exp_report_head_dimension');
                var d2 = $('exp_report_head_object');
                var rec = d2.getAt(0).data;
                if (!d1.validate()) {
                    return;
                }
                if (!d2.validate()) {
                    return;
                }
                if (!$('exp_report_head').validate()) {
                    return;
                }
                if (!$('transportation_exp_report_lines').validate()) {
                    return;
                }
                if (!$('accommodation_exp_report_lines').validate()) {
                    return;
                }
                if (!$('other_exp_report_lines').validate()) {
                    return;
                }
                if (!$('pmtplan_schedules_ds').validate()) {
                    return;
                }
                if (!$('exp_report_object_lines').validate()) {
                    return;
                }
                if (($('transportation_exp_report_lines').getAll().length + $('accommodation_exp_report_lines').getAll().length + $('other_exp_report_lines').getAll().length) == 0) {
                    Aurora.showInfoMessage('${l:PROMPT}', '${l:PLEASE_INSERT_LINE_DATA}', null, 250, 100);
                    return;
                }
                for (var p in rec) {
                    if (p.substring(0, 1) == '#') {
                        var records = $('exp_report_object_lines').getAll();
                        var record = 0;
                        for (var i = 0;i < records.length;i++) {
                            var tempRecord = records[i];
                            if (tempRecord.get('expense_object_type_id') == p.substring(1, p.length)) {
                                record = tempRecord;
                                break;
                            }
                        }
            
                        if (!record) {
                            record = new Aurora.Record({});
                            $('exp_report_object_lines').add(record);
                        }
                        record.data['expense_object_type_id'] = p.substring(1, p.length);
                        record.data['expense_object_id'] = rec[p];
                        record.data['expense_object_desc'] = rec['^' + p];
                        if (exp_report_header_id_bak != '') {
                            record.isNew = false;
                            record.dirty = true;
                        }
                    }
                }
            
                var recd = d1.getAt(0).data;
                for (var p in recd) {
                    if (p.substring(0, 1) == 'e') {
                        var lines = $('transportation_exp_report_lines').getAll();
                        for (var i = 0,
                            l = lines.length;i < l;i++) {
                            lines[i].set(p, recd[p]);
                        }
            
                        var lines = $('accommodation_exp_report_lines').getAll();
                        for (var i = 0,
                            l = lines.length;i < l;i++) {
                            lines[i].set(p, recd[p]);
                        }
            
                        var lines = $('other_exp_report_lines').getAll();
                        for (var i = 0,
                            l = lines.length;i < l;i++) {
                            lines[i].set(p, recd[p]);
                        }
                    }
                }
            
                //行程行费用对象保存
                var transportationLinesDs = $('transportation_exp_report_lines');
                var transLineRecords = transportationLinesDs.getAll();
                for (var t = 0;t < transLineRecords.length;t++) {
                    var los = [];
                    var recp = transLineRecords[t].data
                    for (var q in recp) {
                        var llo = {};
                        if (q.substring(0, 1) == '^') {
            
                            llo['expense_object_type_id'] = q.substring(2, q.length);
                            llo['expense_object_id'] = recp[q.replace('^', '')];
                            llo['expense_object_desc'] = recp[q];
            
                            if (transLineRecords[t].isNew) {
                                llo['_status'] = 'insert';
                            } else {
                                llo['_status'] = 'update';
                                llo['exp_report_line_id'] = transLineRecords[t].get('exp_report_line_id');
                            }
                            los.push(llo);
                        }
                    }
                    transLineRecords[t].data['details'] = los;
                }
            
                var accommodationLinesDs = $('accommodation_exp_report_lines');
                var accomLineRecords = accommodationLinesDs.getAll();
                for (var t = 0;t < accomLineRecords.length;t++) {
                    var los = [];
                    var recp = accomLineRecords[t].data
                    for (var q in recp) {
                        var llo = {};
                        if (q.substring(0, 1) == '^') {
            
                            llo['expense_object_type_id'] = q.substring(2, q.length);
                            llo['expense_object_id'] = recp[q.replace('^', '')];
                            llo['expense_object_desc'] = recp[q];
            
                            if (accomLineRecords[t].isNew) {
                                llo['_status'] = 'insert';
                            } else {
                                llo['_status'] = 'update';
                                llo['exp_report_line_id'] = accomLineRecords[t].get('exp_report_line_id');
                            }
                            los.push(llo);
                        }
                    }
                    accomLineRecords[t].data['details'] = los;
                }
            
                var otherLinesDs = $('other_exp_report_lines');
                var otherLineRecords = otherLinesDs.getAll();
                for (var t = 0;t < otherLineRecords.length;t++) {
                    var los = [];
                    var recp = otherLineRecords[t].data
                    for (var q in recp) {
                        var llo = {};
                        if (q.substring(0, 1) == '^') {
            
                            llo['expense_object_type_id'] = q.substring(2, q.length);
                            llo['expense_object_id'] = recp[q.replace('^', '')];
                            llo['expense_object_desc'] = recp[q];
            
                            if (otherLineRecords[t].isNew) {
                                llo['_status'] = 'insert';
                            } else {
                                llo['_status'] = 'update';
                                llo['exp_report_line_id'] = otherLineRecords[t].get('exp_report_line_id');
                            }
                            los.push(llo);
                        }
                    }
                    otherLineRecords[t].data['details'] = los;
                }
            
                //add 2013/1/7 wgf
                if (removeFlag) {
                    $('exp_report_head').getCurrentRecord().dirty = true;
                }
            
                $('exp_report_head').submit();
                saveFlag = true; //保存成功后，保存标志变为true
            }
            
            function setfunctionamount(value, record, name) {
                var quotation = $('exp_report_head').getAt(0).get('exp_report_rate_quotation');
                var a = record.get('report_amount');
                var b = $('exp_report_head').getAt(0).get('exp_report_rate');
                if (quotation == 'DIRECT QUOTATION') {
                    record.data['report_functional_amount'] = isNaN(a * b) ? '' : (a * b).toFixed('${/model/precision/record/@precision}');
                    return isNaN(a * b) ? '' : Aurora.formatMoney((a * b).toFixed('${/model/precision/record/@precision}'));
                } else {
                    record.data['report_functional_amount'] = isNaN(a / b) ? '' : (a / b).toFixed('${/model/precision/record/@precision}');
                    return isNaN(a / b) ? '' : Aurora.formatMoney((a / b).toFixed('${/model/precision/record/@precision}'));
                }
            }
            
            function getpmtdate() {
                var period_name = $('exp_report_head').getAt(0).get('period_name');
                Aurora.request({lockMessage:'${l:HAP_WAITING}',lockMessage:'${l:HAP_WAITING}',
                    url: /*${/request/@context_path}/autocrud/csh.sys_fun_get_period_name/query*/
                    $('sys_fun_get_payment_date_link').getUrl() + '?_ban_remind=Y',
                    para: {
                        period_name: period_name
                    },
                    success: pmtdate,
                    scope: this
                });
            }
            
            function pmtcanaddaline() {
                if ($('pmtplan_schedules_ds').getAll().length == 0 && $('exp_report_head').validate()) {
                    if (exp_report_header_id_bak == '') {
                        var t = $('exp_report_head').getAt(0);
                        var r = t.getMeta();
                        r.getField('exp_report_position').setReadOnly(true);
                        r.getField('exp_report_data').setReadOnly(true);
                        r.getField('exp_report_payment_method').setReadOnly(true);
                        r.getField('exp_report_payee_name').setReadOnly(true);
                        r.getField('exp_report_rate_type_name').setReadOnly(true);
                        r.getField('exp_report_rate_quotation_name').setReadOnly(true);
                        r.getField('exp_report_rate').setReadOnly(true);
                        r.getField('exp_report_payee_category_name').setReadOnly(true);
                    }
                    return true;
                } else if ($('pmtplan_schedules_ds').getAll().length != 0) {
                    return true;
                } else {
                    return false;
                }
                return true;
            
            }
            
            function canaddTransLine() {
                if ($('transportation_exp_report_lines').getAll().length == 0 && $('exp_report_head').validate()) {
                    if (exp_report_header_id_bak == '') {
                        var t = $('exp_report_head').getAt(0);
                        var r = t.getMeta();
                        r.getField('exp_report_position').setReadOnly(true);
                        r.getField('exp_report_data').setReadOnly(true);
                        r.getField('exp_report_payment_method').setReadOnly(true);
                        r.getField('exp_report_payee_name').setReadOnly(true);
                        r.getField('exp_report_rate_type_name').setReadOnly(true);
                        r.getField('exp_report_rate_quotation_name').setReadOnly(true);
                        r.getField('exp_report_rate').setReadOnly(true);
                        r.getField('exp_report_payee_category_name').setReadOnly(true);
                    }
                    return true;
                } else if ($('transportation_exp_report_lines').getAll().length != 0) {
                    return true;
                } else {
                    return false;
                }
                return true;
            
            }
            
            function canaddAccomLine() {
                if ($('accommodation_exp_report_lines').getAll().length == 0 && $('exp_report_head').validate()) {
                    if (exp_report_header_id_bak == '') {
                        var t = $('exp_report_head').getAt(0);
                        var r = t.getMeta();
                        r.getField('exp_report_position').setReadOnly(true);
                        r.getField('exp_report_data').setReadOnly(true);
                        r.getField('exp_report_payment_method').setReadOnly(true);
                        r.getField('exp_report_payee_name').setReadOnly(true);
                        r.getField('exp_report_rate_type_name').setReadOnly(true);
                        r.getField('exp_report_rate_quotation_name').setReadOnly(true);
                        r.getField('exp_report_rate').setReadOnly(true);
                        r.getField('exp_report_payee_category_name').setReadOnly(true);
                    }
                    return true;
                } else if ($('accommodation_exp_report_lines').getAll().length != 0) {
                    return true;
                } else {
                    return false;
                }
                return true;
            
            }
            
            function canaddOtherLine() {
                if ($('other_exp_report_lines').getAll().length == 0 && $('exp_report_head').validate()) {
                    if (exp_report_header_id_bak == '') {
                        var t = $('exp_report_head').getAt(0);
                        var r = t.getMeta();
                        r.getField('exp_report_position').setReadOnly(true);
                        r.getField('exp_report_data').setReadOnly(true);
                        r.getField('exp_report_payment_method').setReadOnly(true);
                        r.getField('exp_report_payee_name').setReadOnly(true);
                        r.getField('exp_report_rate_type_name').setReadOnly(true);
                        r.getField('exp_report_rate_quotation_name').setReadOnly(true);
                        r.getField('exp_report_rate').setReadOnly(true);
                        r.getField('exp_report_payee_category_name').setReadOnly(true);
                    }
                    return true;
                } else if ($('other_exp_report_lines').getAll().length != 0) {
                    return true;
                } else {
                    return false;
                }
                return true;
            
            }
            //原点击保存后触发的操作
            
            function reloadres(ds, res) {
                saveFlag = true;
                var t = exp_report_header_id_bak == '' ? res.result.record.exp_report_header_id : exp_report_header_id_bak;
                Ext.get('deletereportBtn').show();
                Ext.get('uploadFileBtn').show();
                Ext.get('seeHisBtn').show();
                Ext.get('submitBtn').show();
                Ext.get('seeLog').show();
                Ext.get('newreportBtn').show();
                Ext.get('policy').show();
                $('exp_report_head').setQueryParameter('exp_report_header_id', t);
                transIndex = 1;
                accomIndex = 1;
                otherIndex = 1;
                $('transportation_exp_report_lines').setQueryParameter('exp_report_header_id', t);
                $('transportation_exp_report_lines').query();
                $('accommodation_exp_report_lines').setQueryParameter('exp_report_header_id', t);
                $('accommodation_exp_report_lines').query();
                $('other_exp_report_lines').setQueryParameter('exp_report_header_id', t);
                $('other_exp_report_lines').query();
                $('pmtplan_schedules_ds').setQueryParameter('exp_report_header_id', t);
                $('pmtplan_schedules_ds').query();
                exp_report_header_id_bak = t;
                //修改头维度DataSet和头费用对象DataSet的数据为dirty=false,isNew=false
                $('exp_report_head_dimension').getAt(0).dirty = false;
                $('exp_report_head_dimension').getAt(0).isNew = false;
            
                $('exp_report_head_object').getAt(0).dirty = false;
                $('exp_report_head_object').getAt(0).isNew = false;
            
                init_bak();
            }
            
            function deletereport() {
                Aurora.showConfirm('${l:EXP_REPORT_CREATE.DELETE}', '${l:EXP_REPORT_CREATE.DELETE}', function(cmp) {
                    if (exp_report_header_id_bak != '') {
                        Aurora.request({lockMessage:'${l:HAP_WAITING}',lockMessage:'${l:HAP_WAITING}',
                            url: /*exp_report_delete.svc*/
                            $('exp_report_delete_link_1').getUrl(),
                            para: {
                                exp_report_header_id: exp_report_header_id_bak
                            },
                            success: function() {
                                if (!opener) {
                                    window.location.href = /*exp_report_type_choice.screen*/
                                    $('exp_report_type_choice_link_1').getUrl()
                                } else {
                                    opener.query();
                                    window.close();
                                }
                            },
                            scope: this
                        });
                    }
            
                }, null, null, 85);
            
            }
            
            function header_ds_update(ds, record, name, value, oldvalue) {
                if (name == 'exp_report_data') {
                    showPeriod(record);
                }
                if (name == 'rate_method_code') {
                    record.set('exp_report_rate_quotation_name', '');
                    record.set('exp_report_rate_quotation', '');
                    record.set('exp_report_rate', '');
                    var meta = record.getMeta();
                    if (value == 'DAILY' || value == 'FIXED') {
                        meta.getField('exp_report_rate_quotation_name').setReadOnly(true);
                        meta.getField('exp_report_rate_quotation_name').setRequired(false);
                        meta.getField('exp_report_rate').setReadOnly(true);
                        record.set('exp_report_rate', '');
            
                        getExchangeRate({
                            fromCur: record.get('functional_currency_code'),
                            toCur: record.get('exp_report_currency_code'),
                            exchangeRateType: record.get('exp_report_rate_type'),
                            exchangeDate: record.get('exp_report_data'),
                            periodName: record.get('period_name')
                        });
                    } else if (value == 'PERIOD' || value == 'MANUAL') {
                        if (record.get('currency_code') != record.get('functional_currency_code')) {
                            meta.getField('exp_report_rate_quotation_name').setReadOnly(false);
                            meta.getField('exp_report_rate').setReadOnly(false);
                            meta.getField('exp_report_rate_quotation_name').setRequired(true);
                            meta.getField('exp_report_rate').setRequired(true);
                            record.set('exp_report_rate_quotation_name', '');
                            record.set('exp_report_rate', '');
                        }
                    } else {
            
                       }
                }
            
                if (name == 'exp_report_rate_quotation') {
                    if (record.get('exp_report_rate_type') == null || record.get('exp_report_rate_type') == '') {
                        Aurora.showMessage('提示', '汇率类型不能为空');
                        return;
                    } else {
                        getExchangeRateByQuo({
                            fromCur: record.get('functional_currency_code'),
                            toCur: record.get('exp_report_currency_code'),
                            exchangeRateType: record.get('exp_report_rate_type'),
                            exchangeDate: record.get('exp_report_data'),
                            periodName: record.get('period_name'),
                            exchangeRateQuo: record.get('exp_report_rate_quotation')
                        });
                    }
                }
            
                if (name == 'exp_report_payee_category') {
                    record.set('exp_report_payee_name', '');
                    record.set('exp_report_payee_id', '');
                    var payee_category = value;
                    var f1 = record.getField('exp_report_payee_name');
                    if (payee_category == null || payee_category == undefined || payee_category == '') {
                        f1.setReadOnly(true);
                        f1.setLovService('');
                    } else if (payee_category == 'EMPLOYEE') {
                        f1.setReadOnly(false);
                        f1.setLovService('expm.exp_employee_req_lov');
                        f1.setTitle('${l:EXP_EMPLOYEES.QUERY}');
                    } else if (payee_category == 'VENDER') {
                        f1.setReadOnly(false);
                        f1.setTitle('${l:VENDER_SEARCH}');
                        f1.setLovService('expm.exp_vender_req_lov');
                    } else {
                        f1.setReadOnly(false);
                        f1.setTitle('${l:EXP_EMPLOYEES.QUERY}');
                        f1.setLovService('expm.exp_customer_req_lov');
                    }
            
                }
            
            }
            
            function getExchangeRate(param) {
                Aurora.request({lockMessage:'${l:HAP_WAITING}',lockMessage:'${l:HAP_WAITING}',
                    url: /*${/request/@context_path}/autocrud/expm.get_exchange_rate/query*/
                    $('get_exchange_rate_link_16').getUrl(),
                    para: {
                        from_currency: param.fromCur,
                        to_currency: param.toCur,
                        exchange_date: param.exchangeDate,
                        exchange_period_name: param.periodName,
                        exchange_rate_type: param.exchangeRateType
                    },
                    success: setRateAndQuotation,
                    scope: this
                });
            }
            
            function getExchangeRateByQuo(param) {
                Aurora.request({lockMessage:'${l:HAP_WAITING}',lockMessage:'${l:HAP_WAITING}',
                    url: $('get_exchange_rate_by_quotation_link').getUrl(),
                    para: {
                        from_currency: param.fromCur,
                        to_currency: param.toCur,
                        exchange_date: param.exchangeDate,
                        exchange_period_name: param.periodName,
                        exchange_rate_type: param.exchangeRateType,
                        exchange_rate_quo: param.exchangeRateQuo
                    },
                    success: setRate,
                    scope: this
                });
            }
            
            function setRate(res) {
                var record = $('exp_report_head').getAt(0);
                record.set('exp_report_rate', res.result.record.exchange_rate);
            }
            
            function setRateAndQuotation(res) {
                var record = $('exp_report_head').getAt(0);
                record.set('exp_report_rate', res.result.record.exchange_rate);
                record.set('exp_report_rate_quotation_name', getDisplayByValue(res.result.record.exchange_rate_quotation, 'code_value', 'code_value_name', 'quotation'));
            }
            
            function getDisplayByValue(value, valueName, displayName, dsName) {
                var dataSet = $(dsName);
                var records = dataSet.getAll();
                for (var i = 0;i < records.length;i++) {
                    if (records[i].get(valueName) == value) {
                        return records[i].get(displayName);
                    }
                }
            }
            
            function showPeriod(record) {
                var r_date = Aurora.formatDate(record.get('exp_report_data'));
                if ($('exp_report_head').getAt(0).get('budget_control_enabled') == 'N') {
                    Aurora.request({lockMessage:'${l:HAP_WAITING}',lockMessage:'${l:HAP_WAITING}',
                        url: /*${/request/@context_path}/autocrud/csh.sys_fun_get_period_name/query*/
                        $('sys_fun_get_period_name_link_5').getUrl(),
                        para: {
                            p_date: r_date
                        },
                        success: periodname,
                        scope: this
                    });
                } else {
                    Aurora.request({lockMessage:'${l:HAP_WAITING}',lockMessage:'${l:HAP_WAITING}',
                        url: $('sys_fun_get_period_name_link_6').getUrl(),
                        para: {
                            p_date: r_date
                        },
                        success: periodname,
                        scope: this
                    });
                }
            }
            
            function periodname(res) {
                if (res) {
                    var pluscols = res.result.record.period_name;
                    if (pluscols) {
                        $('exp_report_head').getAt(0).set('period_name', pluscols);
                    } else {
                        $('exp_report_head').getAt(0).set('period_name', '');
                    }
                }
                getpmtdate();
            }
            
            function pmtdate(res) {
                var pluscols = res.result.schedule_due_date;
                if (pluscols) {
                    pmt_schedule_due_date = pluscols;
                    // $('exp_report_head').getAt(0).set('schedule_due_date', pluscols);
                } else {
                    pmt_schedule_due_date = '';
                    // $('exp_report_head').getAt(0).set('schedule_due_date', '');
                }
            }
            
            function afterperiodds(ds) {
                var record = ds.getAt(0);
                $('exp_report_head').getAt(0).set('period_name', record.get('period_name'));
            }
            
            function afterrateds(ds) {
                var record = ds.getAt(0);
            
                if (record) {
                    $('exp_report_head').getAt(0).set('exp_report_rate_quotation', record.get('exchange_rate_quotation'));
                    $('exp_report_head').getAt(0).set('exp_report_rate_quotation_name', record.get('quotation_display'));
                    $('exp_report_head').getAt(0).set('exp_report_rate', record.get('exchange_rate'));
                }
            }
            
            function submitreport() {
                submitFlag = true;
                //必须在动态列和行都处于无脏数据的情况下才能进行保存。否则提示。
                if (!saveFlag || $('transportation_exp_report_lines').isModified() || $('accommodation_exp_report_lines').isModified() || $('other_exp_report_lines').isModified() || ($('exp_report_head').isModified()) || ($('pmtplan_schedules_ds').isModified())) {
                    Aurora.showInfoMessage('${l:PROMPT}', '${l:PROMPT.SAVE_SUBMIT}', null, 250, 100);
                    return;
                }
                if (!$('transportation_exp_report_lines').validate()) {
                    return;
                }
            
                if (!$('accommodation_exp_report_lines').validate()) {
                    return;
                }
            
                if (!$('other_exp_report_lines').validate()) {
                    return;
                }
                if (!$('pmtplan_schedules_ds').validate()) {
                    return;
                }
                //修改报销单凭证生成方式，所以不需要支付的报销单也需要进行计划付款行总金额与行总金额对等校验
                Aurora.request({lockMessage:'${l:HAP_WAITING}',lockMessage:'${l:HAP_WAITING}',
                    url: $('exp_report_pmt_check_link').getUrl(),
                    para: {
                        exp_report_header_id: exp_report_header_id_bak
                    },
                    success: function(res) {
                        if (res.result.flag == 'N') {
                            Aurora.showInfoMessage('${l:PROMPT}', '${l:PROMPT.PMT_CHECK}', null, 250, 100);
                            return;
                        } else {
                            bgtCheck();
                        }
                    },
                    scope: this
                });
            }
            
            function bgtCheck() {
                if ($('exp_report_head').getAt(0).get('budget_control_enabled') == 'Y') {
                    Aurora.request({lockMessage:'${l:HAP_WAITING}',lockMessage:'${l:HAP_WAITING}',
                        url: /*${/request/@context_path}/autocrud/expm.exp_report_bgt_check/execute*/
                        $('exp_report_bgt_check_link').getUrl(),
                        para: {
                            exp_report_header_id: exp_report_header_id_bak,
                            flag: 'N'
                        },
                        success: nextProcess,
                        scope: this
                    });
                } else {
                    finalSubmit();
                }
            }
            
            function bgt_check_with_cache() {
                if ($('exp_report_head').getAt(0).get('budget_control_enabled') == 'Y') {
                    Aurora.request({lockMessage:'${l:HAP_WAITING}',lockMessage:'${l:HAP_WAITING}',
                        url: /*${/request/@context_path}/autocrud/expm.exp_report_bgt_check/execute*/
                        $('exp_report_bgt_check_with_cache_link').getUrl(),
                        para: {
                            exp_report_header_id: exp_report_header_id_bak,
                            flag: 'N'
                        },
                        success: next_process_witch_cache,
                        scope: this
                    });
                } else {
                    finalSubmit();
                }
            }
            
            function nextProcess(res) {
                var t = res.result['error_level_code'];
                if (!t) {
                    checkSubmit();
                } else if (t == 'ALLOWED') {
                    var okCan = Aurora.showConfirm('${l:PROMPT}', res.result.message_code, function() {
                        checkSubmit('Y');
                        okCan.close();
                    }, function() {
                        //$('submitBtn').disable();
                        okCan.close();
                    }, 300, 200);
                } else if (t == 'BLOCK') {
                    Aurora.showInfoMessage('${l:PROMPT}', res.result.message_code, null, 250, 100);
                    submitFlag = 0;
                }
            }
            
            function next_process_witch_cache(res) {
                var t = res.result['error_level_code'];
                if (!t) {
                    check_submit_with_cache();
                } else if (t == 'ALLOWED') {
                    var okCan = Aurora.showConfirm('${l:PROMPT}', res.result.message_code, function() {
                        check_submit_with_cache('Y');
                        okCan.close();
                    }, function() {
                        //$('submitBtn').disable();
                        okCan.close();
                    }, 300, 200);
                } else if (t == 'BLOCK') {
                    Aurora.showInfoMessage('${l:PROMPT}', res.result.message_code, null, 250, 100);
                    submitFlag = 0;
                }
            }
            
            function checkSubmit(flag) {
                if (flag) {
                    Aurora.request({lockMessage:'${l:HAP_WAITING}',lockMessage:'${l:HAP_WAITING}',
                        url: /*${/request/@context_path}/autocrud/expm.exp_report_bgt_check/execute*/
                        $('exp_report_bgt_check_link').getUrl(),
                        para: {
                            exp_report_header_id: exp_report_header_id_bak,
                            flag: 'Y'
                        },
                        success: finalSubmit,
                        scope: this
                    });
                } else {
                    finalSubmit();
                }
            }
            
            function check_submit_with_cache(flag) {
                if (flag) {
                    Aurora.request({lockMessage:'${l:HAP_WAITING}',lockMessage:'${l:HAP_WAITING}',
                        url: /*${/request/@context_path}/autocrud/expm.exp_report_bgt_check/execute*/
                        $('exp_report_bgt_check_with_cache_link').getUrl(),
                        para: {
                            exp_report_header_id: exp_report_header_id_bak,
                            flag: 'Y'
                        },
                        success: finalSubmit,
                        scope: this
                    });
                } else {
                    finalSubmit();
                }
            }
            
            function finalSubmit() {
                Aurora.request({lockMessage:'${l:HAP_WAITING}',lockMessage:'${l:HAP_WAITING}',
                    url: /*${/request/@context_path}/autocrud/expm.exp_report_submit/execute*/
                    $('exp_report_submit_link').getUrl(),
                    para: {
                        exp_report_header_id: exp_report_header_id_bak
                    },
                    success: function() {
                        if (window.opener) {
                            window.opener.query();
                            window.close();
                        } else {
                            window.location.href = /*exp_report_maintain_query.screen*/
                            $('exp_report_maintain_query_link_1').getUrl();
            
                        }
                    },
                    scope: this
                });
            }
            
            function processres(ds, res) {
                var record = ds.getAt(0);
                if (record.get('error_level_code') == '' || record.get('error_level_code') == null || record.get('error_level_code') == undefined) {
                    final_submit();
                } else if (record.get('error_level_code') == 'ALLOWED') {
            
                   } else if (record.get('error_level_code') == 'BLOCK') {
                    Aurora.showErrorMessage('${l:PROMPT}', '', null, null, 100);
                }
            
            }
            
            function resetobjds(ds, res) {
                $('exp_report_object_lines').removeAll();
            }
            
            function dispatchtomaintain(ds, res) {
                if (!opener) {
                    window.location.href = /*exp_report_maintain_query.screen*/
                    $('exp_report_maintain_query_link_1').getUrl()
                } else {
                    opener.query();
                    window.close();
                }
            }
            
            function final_submit() {
                var record = $('exp_report_head_final_submit').getAt(0);
                record.set('exp_report_header_id', exp_report_header_id_bak);
                record.isNew = true;
                record.dirty = true;
                $('exp_report_head_final_submit').submit();
            }
            
            function newreport() {
                var okCan = Aurora.showConfirm('${l:PROMPT}', '${l:PROMPTS.SAVE_CONTINUE}', function() {
                    if (($('transportation_exp_report_lines').getAll().length　 + $('accommodation_exp_report_lines').getAll().length + $('other_exp_report_lines').getAll().length) == 0) {
                        Aurora.showInfoMessage('${l:PROMPT}', '${l:PLEASE_INSERT_LINE_DATA}', null, 250, 100);
                        return;
                    }
                    savereport();
                    window.location.href = /*exp_report_type_choice.screen*/
                    $('exp_report_type_choice_link_1').getUrl();
                    okCan.close();
                }, null, 250, 100);
            }
            
            function policyFunction() {
                var record = $('exp_report_head').getAt(0);
                new Aurora.Window({
                    url: $('exp_document_req_policy_query_link').getUrl() + '?exp_report_header_id=' + record.get('exp_report_header_id'),
                    title: '${l:PROMPT.VIEW_POLICIES}',
                    id: 'exp_document_policy_query_screen',
                    fullScreen: true
                });
            }
            
            
            function dateValidate(record, name, value) {
                if (name == 'departure_date' || name == 'arrival_date') {
                    var departure_date = record.get('departure_date');
                    var arrival_date = record.get('arrival_date');
                    if (typeof(arrival_date) != 'undefined' && !Aurora.isEmpty(arrival_date)) {
                        if (Aurora.formatDate(departure_date) > Aurora.formatDate(arrival_date)) {
                            return '${l:START_GREATER_THAN_END}';
                        }
                    }
                    return true;
                }
                if (name == 'accommodation_date_from' || name == 'accommodation_date_to') {
                    var accommodation_date_from = record.get('accommodation_date_from');
                    var accommodation_date_to = record.get('accommodation_date_to');
                    if (typeof(accommodation_date_to) != 'undefined' && !Aurora.isEmpty(accommodation_date_to)) {
            
                        if (Aurora.formatDate(accommodation_date_from) > Aurora.formatDate(accommodation_date_to)) {
                            return '${l:START_GREATER_THAN_END}';
                        }
            
                    }
                    if (accommodation_date_from && accommodation_date_to) {
            
                        record.set('accommodation_days', Math.ceil((new Date(accommodation_date_to).getTime() - new Date(accommodation_date_from).getTime()) / (1000 * 60 * 60 * 24)));
                    }
                    return true;
                }
            }
            
            function compareDate(start, end) {
                if (start > end) {
                    return false;
                }
                return true;
            }
            
            function seeLog() {
                var url = $('exp_budget_check_log_link_9').getUrl() + '?exp_requisition_header_id=' + exp_report_header_id_bak + '&document_type=EXP_REPORT&doc_header_id=' + exp_report_header_id_bak;
                new Aurora.Window({
                    id: 'exp_budget_check_log_screen',
                    url: url,
                    title: '${l:EXP_REQUESTION_CREATE_SERVICE.LOG}',
                    fullScreen: true
                });
            }
            
            function seeHistory() {
                var url = $('exp_report_query_history_link_6').getUrl() + '?head_id=' + exp_report_header_id_bak;
                new Aurora.Window({
                    id: 'exp_report_history_window',
                    url: url,
                    title: '${l:REC_REQUISITION_HISTORY}',
                    fullScreen: true
                });
            }
            
            function lineLoadFunction(ds) {
                initTransLineIndex = $('transportation_exp_report_lines').getAll().length;
                initAccomLineIndex = $('accommodation_exp_report_lines').getAll().length;
                initOtherLineIndex = $('other_exp_report_lines').getAll().length;
                var record = $('exp_report_head').getCurrentRecord();
                var value = record.get('exp_report_payee_id');
                var payee_category = record.get('exp_report_payee_category');
                // headAmountChanged();
                //added by mjj at 2014-07-17 行加载时检查费用政策
                var records = $('transportation_exp_report_lines').getAll();
                var len = records.length;
                for (var i = 0;i < len;i++) {
                    lineInfoInit(records[i]);
                }
            
                var records = $('accommodation_exp_report_lines').getAll();
                var len = records.length;
                for (var i = 0;i < len;i++) {
                    lineInfoInit(records[i]);
                }
            
                var records = $('other_exp_report_lines').getAll();
                var len = records.length;
                for (var i = 0;i < len;i++) {
                    lineInfoInit(records[i]);
                }
                // end add
            }
            
            function priceValidator(record, name, value) {
                if (record.get('p_upper_limit')) {
                    if (parseFloat(value) > parseFloat(record.get('p_upper_limit')) && record.get('p_commit_flag') && record.get('p_commit_flag') == 'N') {
                        return '${l:EXP_REPORT_CREATE.CHECK1}';
                    }
                }
            
                if (record.get('p_lower_limit')) {
                    if (parseFloat(value) < parseFloat(record.get('p_lower_limit')) && record.get('p_commit_flag') && record.get('p_commit_flag') == 'N') {
                        return '${l:EXP_REPORT_CREATE.CHECK2}';
                    }
                }
            
                return true;
            }
            
            function uploadFile() {
                var url = /*${/request/@context_path}/uploadFile.screen*/
                $('uploadFile_link_10').getUrl() + '?table_name=EXP_REPORT_HEADERS&header_id=' + exp_report_header_id_bak
                new Aurora.Window({
                    url: url,
                    title: '${l:ATM.UPLOAD_ATTACHMENT}',
                    id: 'check_upload_file_screen',
                    width: 600,
                    height: 400
                });
            }
            
            //当修改动态列里面的数据后保存标志变为false
            
            function dynamicUpdate() {
                saveFlag = false;
            }
            
            function line_number(value, record, name) {
                return ($('pmtplan_schedules_ds').indexOf(record) + 1) * 10;
            }
            
            function submit_success() {
                $('pmtplan_schedules_ds').query();
            }
            
            function edit_function_grop(value, record, name) {
                var url = $('exp_prepayment_post_link_2').getUrl() + '?payment_schedule_line_id=' + record.get('payment_schedule_line_id');
                if (!record.isNew) {
                    if (record.get('un_write_off_flag') == 'N') {
                        return '<a style="color:red" href="javascript:view_doc(\'' + url + '\')">' + '${l:EXP_REPORT_PMTPLAN_SCHEDULES.VERIFICATION_LOAN}' + '</a>';
                    } else {
                        return '<a href="javascript:view_doc(\'' + url + '\')">' + '${l:EXP_REPORT_PMTPLAN_SCHEDULES.VERIFICATION_LOAN}' + '</a>';
                    }
                }
            }
            
            function view_doc(url) {
                new Aurora.Window({
                    url: url,
                    fullScreen: true,
                    title: '',
                    id: 'exp_prepayment_post_screen'
                });
            }
            
            function init_bak() {
                var t = $('exp_report_head').getAt(0);
                var r = t.getMeta();
                var f1 = r.getField('exp_report_rate_type_name');
                var f2 = r.getField('exp_report_rate_quotation_name');
                var f3 = r.getField('exp_report_rate');
            
                if (t.get('exp_report_currency_code') != t.get('functional_currency_code')) {} else {
                    f1.setReadOnly(true);
                    f2.setReadOnly(true);
                    f3.setReadOnly(true);
                    f3.setRequired(true);
                    t.set('exp_report_rate', 1);
                }
                if (exp_report_header_id_bak != '') {
                    r.getField('exp_report_data').setReadOnly(true);
                    r.getField('exp_report_payment_method').setReadOnly(true);
                    r.getField('exp_report_position').setReadOnly(true);
                    r.getField('exp_report_payee_category_name').setReadOnly(true);
                    r.getField('exp_report_payee_name').setReadOnly(true);
                    for (var fieldName in t.data) {
                        if (fieldName != 'exp_report_description' && fieldName != 'exp_report_attach_id') {
                            r.getField(fieldName).setReadOnly(true);
                        }
                    }
                    f1 = r.getField('exp_report_payee_name');
                    var payee_category = t.get('exp_report_payee_category');
                    if (payee_category == 'EMPLOYEE') {
                        f1.setLovService('expm.exp_employee_req_lov');
                    } else if (payee_category == 'VENDER') {
                        f1.setLovService('expm.exp_vender_req_lov');
                    } else {
                        f1.setLovService('expm.exp_customer_req_lov');
                    }
                }
            }
            
            //计划付款行删除2013/1/7 wgf
            
            function remove_record(ds, record, index) {
                removeFlag = true;
            }
            
            //add 2013/1/11 wgf 收款对象修改
            
            function payee_name_lov_commit(lov, r1, r2) {
                var payee_category = r1.get('exp_report_payee_category');
                if (payee_category == 'EMPLOYEE') {
                    r1.set('exp_report_payee_id', r2.get('employee_id'));
                    r1.set("bank_code", r2.get("bank_code"));
                    r1.set("bank_name", r2.get("bank_name"));
                    r1.set("bank_location_code", r2.get("bank_location_code"));
                    r1.set("bank_location", r2.get("bank_location"));
                    r1.set("province_code", r2.get("province_code"));
                    r1.set("province_name", r2.get("province_name"));
                    r1.set("city_code", r2.get("city_code"));
                    r1.set("city_name", r2.get("city_name"));
                    r1.set("account_number", r2.get("account_number"));
                    r1.set("account_name", r2.get("account_name"));
                    r1.set("notes", r2.get("notes"));
                } else if (payee_category == 'VENDER') {
                    r1.set('exp_report_payee_id', r2.get('vender_id'));
                    r1.set("bank_code", r2.get("bank_code"));
                    r1.set("bank_name", r2.get("bank_name"));
                    r1.set("bank_location_code", r2.get("bank_location_code"));
                    r1.set("bank_location", r2.get("bank_location"));
                    r1.set("province_code", r2.get("province_code"));
                    r1.set("province_name", r2.get("province_name"));
                    r1.set("city_code", r2.get("city_code"));
                    r1.set("city_name", r2.get("city_name"));
                    r1.set("account_number", r2.get("account_number"));
                    r1.set("account_name", r2.get("account_name"));
                    r1.set("notes", r2.get("notes"));
                } else {
                    r1.set('exp_report_payee_id', r2.get('customer_id'));
                    r1.set("bank_code", r2.get("bank_code"));
                    r1.set("bank_name", r2.get("bank_name"));
                    r1.set("bank_location_code", r2.get("bank_location_code"));
                    r1.set("bank_location", r2.get("bank_location"));
                    r1.set("province_code", r2.get("province_code"));
                    r1.set("province_name", r2.get("province_name"));
                    r1.set("city_code", r2.get("city_code"));
                    r1.set("city_name", r2.get("city_name"));
                    r1.set("account_number", r2.get("account_number"));
                    r1.set("account_name", r2.get("account_name"));
                    r1.set("notes", r2.get("notes"));
                }
            }
            
            // modify 20130401 计划付款行添加 银行账号修改功能
            
            function bankAssign(value, record, name) {
                var pmtLineIndex = $('pmtplan_schedules_ds').indexOf(record);
                return '<a href="javascript:bankAssignInfo(' + pmtLineIndex + ')">${l:CSH_PAYMENT.BANK_ACCOUNT_CODE}</a>';
            }
            
            function bankAssignInfo(pmtLineIndex) {
                new Aurora.Window({
                    id: 'exp_bank_assign_window',
                    url: $('exp_bank_assign_link').getUrl() + '?line_index=' + pmtLineIndex + '&ds_name=pmtplan_schedules_ds',
                    title: '${l:CSH_PAYMENT.BANK_ACCOUNT_CODE}',
                    fullScreen: true
                });
            }
            
            function getRecordsFromBankCode(record) {
                var pmt_line_index = record.get('line_index');
                var pmtplan_schedules_record = $('pmtplan_schedules_ds').getAt(pmt_line_index);
                pmtplan_schedules_record.set('account_number', record.get('account_number'));
                pmtplan_schedules_record.set('account_name', record.get('account_name'));
                pmtplan_schedules_record.set('bank_code', record.get('bank_code'));
                pmtplan_schedules_record.set('bank_name', record.get('bank_name'));
                pmtplan_schedules_record.set('bank_location_code', record.get('bank_location_code'));
                pmtplan_schedules_record.set('bank_location_name', record.get('bank_location_name'));
                pmtplan_schedules_record.set('province_code', record.get('province_code'));
                pmtplan_schedules_record.set('province_name', record.get('province_name'));
                pmtplan_schedules_record.set('city_code', record.get('city_code'));
                pmtplan_schedules_record.set('city_name', record.get('city_name'));
            }
            
            function createFromTravelPlan() {
                var record = $('exp_report_head').getAt(0);
                var employee_id = record.get('employee_id');
                var exp_report_type_id = record.get('exp_report_type_id');
                var currency_code = record.get('exp_report_currency_code');
                new Aurora.Window({
                    url: $('from_travel_plan_link').getUrl() + '?employee_id=' + employee_id + '&exp_report_type_id=' + exp_report_type_id + '&currency_code=' + currency_code,
                    id: 'from_travel_plan_window',
                    fullScreen: true
                });
            }
            
            // 通过键值对找到对应的行（第一次出现的），例如通过code_value_name：飞机 可以找到code_value：PLANE，code_value_name：飞机 这条记录。
            
            
            function find(ds, key, value) {
                var records = ds.getAll();
                for (var i = 0;i < records.length;i++) {
                    if (records[i].get(key) == value) {
                        return records[i];
                    }
                }
                return null;
            }
            
            function createLineFromTravelPlanData(travel_plan) {
                // //首先将差旅计划头的信息更新到报销单头中。
                // var head = $('exp_report_head').getAt(0);
                // //申请人
                // head.set('employee_id', travel_plan.employee_id);
                // head.set('employee_name', travel_plan.employee_name);
                // //岗位
                // head.set('position_id', travel_plan.position_id);
                // head.set('posttion_name', travel_plan.position_name);
                // // 收款信息
                // head.set('exp_report_payee_category', 'EMPLOYEE'); // 这里默认收款类型为EMPLOYEE
                // var payee_category_record = find($('pay_category_ds'), 'code_value', 'EMPLOYEE');
                // head.set('exp_report_payee_category_name', payee_category_record.get('code_value_name'));
                // head.set('exp_report_payee_id', travel_plan.employee_id); //收款方默认为差旅计划的申请人.
                // head.set('exp_report_payee_name', travel_plan.employee_name);
                // //币种
                // head.set('exp_report_currency_code', travel_plan.currency_code);
                // head.set('exp_report_currency_name', travel_plan.currency_code_name);
                // //汇率
                // head.set('exp_report_rate_type', travel_plan.exchange_rate_type);
                // head.set('exp_report_rate_type_name', travel_plan.exchange_rate_type_name);
                // head.set('exp_report_rate_quotation', travel_plan.exchange_rate_quotation || 'DIRECT QUOTATION'); // 默认是直接标价
                // head.set('exp_report_rate_quotation_name', find($('exp_exchange_rate_quta_ds'), 'code_value', head.get('exp_report_rate_quotation')).get('code_value_name'));
                // // head.set('exchange_rate', travel_plan.exchange_rate);
                // //金额
                // head.set('sum_amount', travel_plan.sum_amount);
            
                // 循环差旅计划行数据，进行创建行
                var lines = travel_plan.lines;
                for (var i = 0;i < lines.length;i++) {
                    var obj = {};
                    // exp_travel_lines
                    obj.travel_plan_line_id = lines[i].travel_plan_line_id;
                    obj.travel_line_category = lines[i].travel_line_category;
                    var transportation_record = find($('travel_transportation_ds'), 'code_value', lines[i].transportation);
                    if (transportation_record != null) {
                        obj.transportation_desc = transportation_record.get('code_value_name');
                        obj.transportation = lines[i].transportation;
                    }
                    obj.departure_place = lines[i].departure_place;
                    obj.departure_place_id = lines[i].departure_place_id;
                    obj.departure_date = lines[i].departure_date;
                    obj.arrival_place = lines[i].arrival_place;
                    obj.arrival_place_id = lines[i].arrival_place_id;
                    obj.arrival_date = lines[i].arrival_date;
                    obj.accommodation_date_from = lines[i].accommodation_date_from;
                    obj.accommodation_date_to = lines[i].accommodation_date_to;
                    obj.accommodation_days = lines[i].accommodation_days;
            
                    // exp_report_lines
                    obj.line_number = lines[i].line_num;
                    obj.description = lines[i].description;
                    obj.company_id = lines[i].company_id;
                    obj.company_name = lines[i].company_name;
                    obj.expense_type_id = lines[i].expense_type_id;
                    obj.expense_type_name = lines[i].expense_type_name;
                    obj.exp_req_item_id = lines[i].expense_item_id;
                    obj.exp_req_item_name = lines[i].expense_item_name;
                    obj.price = lines[i].price;
                    obj.primary_quantity = lines[i].quantity;
                    obj.report_amount = lines[i].amount;
                    obj.funcational_amount = lines[i].functional_amount;
                    obj.period_name = '${/model/head_data/record/@period_name}'; // 期间暂时取头上的。
                    obj.responsibility_center_id = lines[i].responsibility_center_id;
                    obj.responsibility_center_name = lines[i].responsibility_center_name;
                    obj.unit_id = lines[i].unit_id;
                    obj.unit_name = lines[i].unit_name;
                    obj.position_id = lines[i].position_id;
                    obj.position_name = lines[i].position_name;
                    obj.employee_id = lines[i].employee_id;
                    obj.employee_name = lines[i].employee_name;
                    obj.currency_code = lines[i].currency_code;
                    obj.exchange_rate_type = lines[i].line_exchange_rate_type;
                    obj.exchange_rate_quotation = lines[i].line_exchange_rate_quotation;
                    obj.exchange_rate = (lines[i].line_exchange_rate || travel_plan.exchange_rate || head.get('exchange_rate')); // 如果行汇率为空，则默认为头汇率
                    obj.place_id = lines[i].place_id;
                    obj.place = lines[i].place;
                    obj.place_type_id = lines[i].place_type_id;
                    obj.d1 = lines[i].d1;
                    obj.d2 = lines[i].d2;
                    obj.d3 = lines[i].d3;
                    obj.d4 = lines[i].d4;
                    obj.d5 = lines[i].d5;
                    obj.d6 = lines[i].d6;
                    obj.d7 = lines[i].d7;
                    obj.d8 = lines[i].d8;
                    obj.d9 = lines[i].d9;
                    obj.d10 = lines[i].d10;
                    obj.e1 = lines[i].dimension1_id;
                    obj.e2 = lines[i].dimension2_id;
                    obj.e3 = lines[i].dimension3_id;
                    obj.e4 = lines[i].dimension4_id;
                    obj.e5 = lines[i].dimension5_id;
                    obj.e6 = lines[i].dimension6_id;
                    obj.e7 = lines[i].dimension7_id;
                    obj.e8 = lines[i].dimension8_id;
                    obj.e9 = lines[i].dimension9_id;
                    obj.e10 = lines[i].dimension10_id;
                    obj.exp_tp_dists_id = lines[i].exp_travel_plan_dists_id;
                    if (obj.travel_line_category == 'TRANSPORTATION') {
                        var lineNum = (transIndex + initTransLineIndex) * 10;
                        transIndex = transIndex + 1;
                        obj.line_number = lineNum;
                        $('transportation_exp_report_lines').add(new Aurora.Record(obj));
                    } else if (obj.travel_line_category == 'ACCOMMODATION') {
                        var lineNum = (accomIndex + initAccomLineIndex) * 10 + 5;
                        accomIndex = accomIndex + 1;
                        obj.line_number = lineNum;
                        $('accommodation_exp_report_lines').add(new Aurora.Record(obj));
                    }
            
                }
            
                //document.getElementById('createFromTravelPlanBtn').style.display = "none";
            }
            
            function required_req(flag) {
                if (flag) {
                    document.getElementById('other_addButton').style.display = "none";
                    document.getElementById('accommodation_addButton').style.display = "none";
                    document.getElementById('transportation_addButton').style.display = "none";
                } else {
                    $('other_addButton').show();
                    $('accommodation_addButton').show();
                    $('transportation_addButton').show();
                }
            
            }
        ]]></script>
        <a:dataSets>
            <a:dataSet id="exp_exchange_rate_quta_ds" lookupCode="EXCHANGE_RATE_QUOTATION"/>
            <a:dataSet id="payment_mehtod_ds">
                <a:datas datasource="/model/payment_method_list"/>
            </a:dataSet>
            <a:dataSet id="exp_exchange_rate_ds" fetchAll="true" model="gld.gld_exchange_rates">
                <a:events>
                    <a:event name="load" handler="afterrateds"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="exp_report_period_ds" fetchAll="true" model="gld.gld_periods">
                <a:events>
                    <a:event name="load" handler="afterperiodds"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="positionlist_ds">
                <a:datas datasource="/model/position_list"/>
            </a:dataSet>
            <a:dataSet id="exp_report_head_submit" autoCreate="true" submitUrl="${/request/@context_path}/modules/expm/public/exp_report_bgt_check.svc">
                <a:fields>
                    <a:field name="exp_report_header_id"/>
                    <a:field name="flag"/>
                </a:fields>
                <a:events>
                    <a:event name="submitsuccess" handler="processres"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="exp_report_head_final_submit" autoCreate="true" submitUrl="${/request/@context_path}/modules/expm/public/exp_report_submit.svc">
                <a:fields>
                    <a:field name="exp_report_header_id"/>
                </a:fields>
                <a:events>
                    <a:event name="submitsuccess" handler="dispatchtomaintain"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="exp_expense_type_ds" fetchAll="true" model="expm.exp_expense_type_flag_filter" queryUrl="${/request/@context_path}/autocrud/expm.exp_expense_type_flag_filter/query?expense_report_type_id=${/parameter/@expense_report_type_id}&amp;exp_report_header_id=${/parameter/@exp_report_header_id}&amp;report_flag=Y"/>
            <a:dataSet id="exp_expense_item_ds" fetchAll="true" model="expm.exp_expense_item_for_travel"/>
            <a:dataSet id="company_ds">
                <a:datas datasource="/model/fnd_company_bm"/>
            </a:dataSet>
            <a:dataSet id="pay_category_ds" lookupcode="PAYMENT_OBJECT"/>
            <a:dataSet id="quotation" lookupcode="EXCHANGE_RATE_QUOTATION"/>
            <a:dataSet id="tax_type_ds" loadData="true" model="fnd.FND2410.fnd_tax_type_code_lov"/>
            <a:dataSet id="exp_report_head" model="expm.exp_report_head_show" submitUrl="${/request/@context_path}/modules/expm/public/exp_report_save_travel.svc">
                <a:datas dataSource="/model/head_data"/>
                <a:fields>
                    <a:field name="exp_report_header_id"/>
                    <a:field name="exp_report_type_name" prompt="EXP_REPORT_HEADERS.EXP_REPORT_TYPE_ID" readonly="true"/>
                    <a:field name="exp_report_type_id"/>
                    <a:field name="company_id"/>
                    <a:field name="company_name"/>
                    <a:field name="payment_flag"/>
                    <a:field name="responsibility_center_name"/>
                    <a:field name="responsibility_center_id"/>
                    <a:field name="unit_id"/>
                    <a:field name="unit_name"/>
                    <a:field name="employee_id"/>
                    <a:field name="employee_name"/>
                    <a:field name="position_id"/>
                    <a:field name="position_name"/>
                    <a:field name="sum_amount" prompt="CON_CONTRACT_HEADERS.SUM_AMOUNT" readOnly="true"/>
                    <a:field name="exp_report_number" prompt="EXP_REPORT_HEADERS.REPORT_NUMBER" readonly="true"/>
                    <a:field name="exp_report_data" prompt="EXP_REPORT_HEADERS.REPORT_DATE" required="true"/>
                    <a:field name="exp_report_period" prompt="EXP_REPORT_HEADERS.PERIOD_NAME"/>
                    <a:field name="exp_report_employee_name" prompt="EXP_REPORT_HEADERS.EMPLOYEE_NAME" readonly="true"/>
                    <a:field name="exp_report_payment_method" displayfield="description" options="payment_mehtod_ds" prompt="EXP_REPORT_HEADERS.PAYMENT_METHOD" required="true" returnfield="payment_method_id" valuefield="payment_method_id"/>
                    <a:field name="exp_report_position" displayfield="position_name" options="positionlist_ds" prompt="EXP_REPORT_HEADERS.POSITION" required="true" returnfield="position_id" valuefield="position_id"/>
                    <a:field name="exp_report_payee_category_name" displayField="code_value_name" options="pay_category_ds" prompt="EXP_REPORT_HEADERS.PAYEE_CATEGORY" required="true" returnField="exp_report_payee_category" valueField="code_value"/>
                    <a:field name="exp_report_payee_category"/>
                    <a:field name="exp_report_payee_name" autoComplete="true" autoCompleteField="code_name" lovGridHeight="320" lovHeight="460" lovWidth="520" lovservice="expm.exp_employee_req_lov" prompt="EXP_REPORT_HEADERS.PAYEE_ID" readOnly="false" required="true">
                        <a:mapping>
                            <a:map from="code_name" to="exp_report_payee_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="exp_report_payee_id"/>
                    <a:field name="exp_report_currency_name" prompt="EXP_REPORT_HEADERS.CURRENCY_CODE" readonly="true"/>
                    <a:field name="exp_report_currency_code"/>
                    <a:field name="exp_report_rate" prompt="EXP_REPORT_HEADERS.EXCHANGE_RATE" required="true"/>
                    <a:field name="exp_report_rate_type_name" autoComplete="true" autoCompleteField="type_name_code" fetchRemote="false" lovGridHeight="320" lovHeight="460" lovWidth="550" lovservice="gld.gld_exchangerate_type_lov" prompt="EXP_REPORT_HEADERS.EXCHANGE_RATE_TYPE" title="EXP_PRE_POST_RO.FEE_TYPE">
                        <a:mapping>
                            <a:map from="type_name" to="exp_report_rate_type_name"/>
                            <a:map from="type_code" to="exp_report_rate_type"/>
                            <a:map from="rate_method_code" to="rate_method_code"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="rate_method_code"/>
                    <a:field name="functional_currency_code"/>
                    <a:field name="exp_report_rate_type"/>
                    <a:field name="exp_report_rate_quotation_name" displayField="code_value_name" options="exp_exchange_rate_quta_ds" prompt="EXP_REPORT_HEADERS.EXCHANGE_RATE_QUOTATION" returnField="exp_report_rate_quotation" valueField="code_value"/>
                    <a:field name="exp_report_rate_quotation"/>
                    <a:field name="exp_report_description" prompt="EXP_REPORT_HEADERS.DESCRIPTION"/>
                    <a:field name="exp_report_attach_id" prompt="EXP_REPORT_HEADERS.ATTACH_ID"/>
                    <a:field name="exp_report_status" prompt="EXP_REPORT_HEADERS.REPORT_STATUS" readOnly="true"/>
                    <a:field name="exp_report_create_by" prompt="EXP_REPORT_HEADERS.CREATE_BY" readOnly="true"/>
                    <a:field name="exp_report_audit_date" prompt="EXP_REPORT_HEADERS.AUDIT_DATE" readOnly="true"/>
                    <a:field name="payment_method_id"/>
                    <a:field name="period_name" prompt="EXP_REQUISITION_HEADERS.PERIOD_NAME" readOnly="true"/>
                    <a:field name="schedule_due_date"/>
                    <a:field name="budget_control_enabled"/>
                </a:fields>
                <a:events>
                    <a:event name="submitsuccess" handler="reloadres"/>
                    <a:event name="update" handler="header_ds_update"/>
                    <a:event name="submitfailed" handler="resetobjds"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="exp_report_head_dimension" autoCreate="true">
                <a:fields>
                    <a:placeHolder id="dynamicHeadFields"/>
                </a:fields>
                <a:events>
                    <a:event name="update" handler="dynamicUpdate"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="exp_report_head_object" autoCreate="true">
                <a:fields>
                    <a:placeHolder id="dynamicHeadObjects"/>
                </a:fields>
                <a:events>
                    <a:event name="update" handler="dynamicUpdate"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="travel_postion_ds" fetchAll="true" model="exp.exp_org_position"/>
            <a:dataSet id="exp_report_object_lines" bindName="objlines" bindTarget="exp_report_head"/>
            <a:dataSet id="travel_transportation_ds" lookupCode="TRANSPORTATION"/>
            <a:dataSet id="transportation_exp_report_lines" autoQuery="true" bindName="transportation_lines" bindTarget="exp_report_head" fetchAll="true" model="expm.exp_report_lines" pageSize="1000" queryUrl="${/request/@context_path}/modules/expm/public/exp_report_line_query_travel.svc?exp_report_header_id=${/parameter/@exp_report_header_id}&amp;_ban_remind=Y&amp;travel_line_category=TRANSPORTATION" selectable="true">
                <a:fields>
                    <a:field name="exp_report_header_id"/>
                    <a:field name="exp_report_line_id"/>
                    <a:field name="company_id"/>
                    <a:field name="company_name" autoComplete="true" autoCompleteField="company_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="exp.exp_company_tree" required="true" title="EXP_REPORT_LINES.COMPANY_ID">
                        <a:mapping>
                            <a:map from="company_short_name" to="company_name"/>
                            <a:map from="company_id" to="company_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="unit_id"/>
                    <a:field name="unit_name" autoComplete="true" autoCompleteField="unit_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="exp.exp_org_unit" required="true" title="EXP_REPORT_LINES.UNIT_ID">
                        <a:mapping>
                            <a:map from="org_unit_description" to="unit_name"/>
                            <a:map from="unit_id" to="unit_id"/>
                            <a:map from="responsibility_center_name" to="responsibility_center_name"/>
                            <a:map from="responsibility_center_id" to="responsibility_center_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="responsibility_center_id"/>
                    <a:field name="responsibility_center_name" autoComplete="true" autoCompleteField="resp_center_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="fnd.fnd_responsibility_centers_lov" required="true" title="EXP_REPORT_LINES.RESPONSIBILITY_CENTER_ID">
                        <a:mapping>
                            <a:map from="responsibility_center_name" to="responsibility_center_name"/>
                            <a:map from="responsibility_center_id" to="responsibility_center_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="position_id"/>
                    <a:field name="position_name" displayfield="position_name" options="travel_postion_ds" required="true" returnfield="position_id" valuefield="position_id"/>
                    <a:field name="employee_id"/>
                    <a:field name="employee_name" autoComplete="true" autoCompleteField="emp_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="expm.exp_report_employeelist_cross_com" required="true" title="EXP_REPORT_LINES.EMPLOYEE_ID">
                        <a:mapping>
                            <a:map from="name" to="employee_name"/>
                            <a:map from="employee_id" to="employee_id"/>
                            <a:map from="position_primary" to="position_primary"/>
                            <!-- <a:map from="position_id" to="position_id"/> -->
                        </a:mapping>
                    </a:field>
                    <a:field name="position_primary"/>
                    <a:field name="currency_code"/>
                    <a:field name="exchange_rate_type"/>
                    <a:field name="exchange_rate_type_name"/>
                    <a:field name="exchange_rate_quotation"/>
                    <a:field name="exchange_rate_quotation_name"/>
                    <a:field name="exchange_rate"/>
                    <a:field name="line_number"/>
                    <a:field name="description" required="true"/>
                    <a:field name="city"/>
                    <a:field name="place" autoComplete="true" autoCompleteField="place_code_name" lovGridHeight="320" lovHeight="450" lovLabelWidth="120" lovService="expm.exp_expense_policy_place_lov" lovWidth="550" prompt="EXP_REQUISITION_LINES.PLACE_ID" title="EXP_REQUISITION_LINES.PLACE_ID">
                        <a:mapping>
                            <a:map from="place_desc" to="place"/>
                            <a:map from="place_id" to="place_id"/>
                            <a:map from="place_type_id" to="place_type_id"/>
                            <a:map from="place_type_desc" to="place_type"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="place_id"/>
                    <a:field name="place_type" autoComplete="true" autoCompleteField="place_type_code_name" lovGridHeight="300" lovHeight="450" lovLabelWidth="120" lovService="expm.exp_expense_policy_place_type_lov" lovWidth="550" prompt="EXP_REQUISITION_LINES.PLACE_TYPE_ID" title="EXP_REQUISITION_LINES.PLACE_TYPE_ID">
                        <a:mapping>
                            <a:map from="place_type_id" to="place_type_id"/>
                            <a:map from="description" to="place_type"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="place_type_id"/>
                    <a:field name="budget_item_id"/>
                    <a:field name="date_from"/>
                    <a:field name="date_to"/>
                    <a:field name="expense_type_id"/>
                    <a:field name="expense_type_name" displayfield="expense_type_description" options="exp_expense_type_ds" required="true" returnfield="expense_type_id" valuefield="expense_type_id">
                        <a:mapping>
                            <a:map from="default_trans_item" to="exp_req_item_id"/>
                            <a:map from="default_trans_item_desc" to="exp_req_item_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="exp_req_item_id"/>
                    <a:field name="exp_req_item_name" displayfield="expense_item_description" options="exp_expense_item_ds" required="true" returnfield="exp_req_item_id" tipfield="expense_item_prompt" valuefield="expense_item_id"/>
                    <a:field name="price" required="true" validator="priceValidator"/>
                    <a:field name="primary_quantity" required="true"/>
                    <a:field name="report_amount" required="true"/>
                    <a:field name="report_functional_amount"/>
                    <a:field name="period_name" autoComplete="true" autoCompleteField="period_name" lovGridHeight="300" lovHeight="460" lovWidth="500" prompt="EXP_REQUISITION_LINES.PERIOD_NAME" required="true" title="EXP_REQUISITION_LINES.PERIOD_NAME">
                        <a:mapping>
                            <a:map from="period_name" to="period_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_flag" checkedvalue="Y" uncheckedvalue="N"/>
                    <a:field name="payee_id"/>
                    <a:field name="contract_header_code" autoComplete="true" autoCompleteField="contract_number" lovGridHeight="300" lovHeight="460" lovService="csh.csh_contract_lov" lovWidth="600" prompt="CON_CONTRACT_HEADERS.CONTRACT_NUMBER" title="CON_CONTRACT_HEADERS.CONTRACT_NUMBER">
                        <a:mapping>
                            <a:map from="contract_number" to="contract_header_code"/>
                            <a:map from="contract_header_id" to="contract_header_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="contract_header_id" prompt="PAYMENT_SCHEDULE_LINE_CODE"/>
                    <a:field name="payment_schedule_line_code" autoComplete="true" autoCompleteField="payment_schedule_line_number" lovGridHeight="250" lovHeight="460" lovService="csh.csh_payment_schedule_lov" lovWidth="600" prompt="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER" title="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER">
                        <a:mapping>
                            <a:map from="payment_schedule_line_number" to="payment_schedule_line_code"/>
                            <a:map from="payment_schedule_line_id" to="payment_schedule_line_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_schedule_line_id"/>
                    <!-- <a:field name="tax_type_desc" displayField="description" options="tax_type_ds" prompt="FND_TAX_TYPE_CODES.TAX_TYPE_RATE" returnField="tax_type_id" valueField="tax_type_id"/>
                    <a:field name="tax_type_id"/> -->
                    <a:placeHolder id="transportation_dynamicLineFields"/>
                    <a:placeHolder id="transportation_dynamicLineFieldsObj"/>
                    <a:field name="transportation_desc" displayField="code_value_name" options="travel_transportation_ds" prompt="EXP_REPORT_TRAVEL_LINES.TRANSPORTATION" required="true" returnField="transportation" valueField="code_value"/>
                    <a:field name="departure_place" autoComplete="true" autoCompleteField="place_code_name" fetchRemote="false" lovGridHeight="320" lovHeight="450" lovLabelWidth="120" lovService="expm.exp_expense_policy_place_lov" lovWidth="550" prompt="EXP_REPORT_TRAVEL_LINES.DEPARTURE_PLACE" required="true" title="EXP_REPORT_TRAVEL_LINES.DEPARTURE_PLACE">
                        <a:mapping>
                            <a:map from="place_desc" to="departure_place"/>
                            <a:map from="place_id" to="departure_place_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="departure_place_id" prompt="EXP_REPORT_TRAVEL_LINES.DEPARTURE_PLACE"/>
                    <a:field name="departure_date" prompt="EXP_REPORT_TRAVEL_LINES.DEPARTURE_DATE" required="true" validator="dateValidate"/>
                    <a:field name="arrival_place" autoComplete="true" autoCompleteField="place_code_name" fetchRemote="false" lovGridHeight="320" lovHeight="450" lovLabelWidth="120" lovService="expm.exp_expense_policy_place_lov" lovWidth="550" prompt="EXP_REPORT_TRAVEL_LINES.ARRIVAL_PLACE" required="true">
                        <a:mapping>
                            <a:map from="place_desc" to="arrival_place"/>
                            <a:map from="place_id" to="arrival_place_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="arrival_place_id" prompt="EXP_REPORT_TRAVEL_LINES.ARRIVAL_PLACE"/>
                    <a:field name="arrival_date" prompt="EXP_REPORT_TRAVEL_LINES.ARRIVAL_DATE" required="true" validator="dateValidate"/>
                    <a:field name="travel_line_category" defaultValue="TRANSPORTATION"/>
                </a:fields>
                <a:events>
                    <a:event name="update" handler="lineupdate"/>
                    <a:event name="beforecreate" handler="canaddTransLine"/>
                    <a:event name="load" handler="lineLoadFunction"/>
                    <a:event name="remove" handler="removeTransLine"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="accommodation_exp_report_lines" autoQuery="true" bindName="accommodation_lines" bindTarget="exp_report_head" fetchAll="true" model="expm.exp_report_lines" pageSize="1000" queryUrl="${/request/@context_path}/modules/expm/public/exp_report_line_query_travel.svc?exp_report_header_id=${/parameter/@exp_report_header_id}&amp;_ban_remind=Y&amp;travel_line_category=ACCOMMODATION" selectable="true">
                <a:fields>
                    <a:field name="exp_report_header_id"/>
                    <a:field name="exp_report_line_id"/>
                    <a:field name="company_id"/>
                    <a:field name="company_name" autoComplete="true" autoCompleteField="company_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="exp.exp_company_tree" required="true" title="EXP_REPORT_LINES.COMPANY_ID">
                        <a:mapping>
                            <a:map from="company_short_name" to="company_name"/>
                            <a:map from="company_id" to="company_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="unit_id"/>
                    <a:field name="unit_name" autoComplete="true" autoCompleteField="unit_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="exp.exp_org_unit" required="true" title="EXP_REPORT_LINES.UNIT_ID">
                        <a:mapping>
                            <a:map from="org_unit_description" to="unit_name"/>
                            <a:map from="unit_id" to="unit_id"/>
                            <a:map from="responsibility_center_name" to="responsibility_center_name"/>
                            <a:map from="responsibility_center_id" to="responsibility_center_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="responsibility_center_id"/>
                    <a:field name="responsibility_center_name" autoComplete="true" autoCompleteField="resp_center_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="fnd.fnd_responsibility_centers_lov" required="true" title="EXP_REPORT_LINES.RESPONSIBILITY_CENTER_ID">
                        <a:mapping>
                            <a:map from="responsibility_center_name" to="responsibility_center_name"/>
                            <a:map from="responsibility_center_id" to="responsibility_center_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="position_id"/>
                    <a:field name="position_name" displayfield="position_name" options="travel_postion_ds" required="true" returnfield="position_id" valuefield="position_id"/>
                    <a:field name="employee_id"/>
                    <a:field name="employee_name" autoComplete="true" autoCompleteField="emp_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="expm.exp_report_employeelist_cross_com" required="true" title="EXP_REPORT_LINES.EMPLOYEE_ID">
                        <a:mapping>
                            <a:map from="name" to="employee_name"/>
                            <a:map from="employee_id" to="employee_id"/>
                            <a:map from="position_primary" to="position_primary"/>
                            <!-- <a:map from="position_id" to="position_id"/> -->
                        </a:mapping>
                    </a:field>
                    <a:field name="position_primary"/>
                    <a:field name="currency_code"/>
                    <a:field name="exchange_rate_type"/>
                    <a:field name="exchange_rate_type_name"/>
                    <a:field name="exchange_rate_quotation"/>
                    <a:field name="exchange_rate_quotation_name"/>
                    <a:field name="exchange_rate"/>
                    <a:field name="line_number"/>
                    <a:field name="description" required="true"/>
                    <a:field name="city"/>
                    <a:field name="budget_item_id"/>
                    <a:field name="date_from"/>
                    <a:field name="date_to"/>
                    <a:field name="expense_type_id"/>
                    <a:field name="expense_type_name" displayfield="expense_type_description" options="exp_expense_type_ds" required="true" returnfield="expense_type_id" valuefield="expense_type_id"/>
                    <a:field name="exp_req_item_id"/>
                    <a:field name="exp_req_item_name" displayfield="expense_item_description" options="exp_expense_item_ds" required="true" returnfield="exp_req_item_id" tipfield="expense_item_prompt" valuefield="expense_item_id"/>
                    <a:field name="price" required="true" validator="priceValidator"/>
                    <a:field name="primary_quantity" required="true"/>
                    <a:field name="report_amount" required="true"/>
                    <a:field name="report_functional_amount"/>
                    <a:field name="period_name" autoComplete="true" autoCompleteField="period_name" lovGridHeight="300" lovHeight="460" lovWidth="500" prompt="EXP_REQUISITION_LINES.PERIOD_NAME" required="true" title="EXP_REQUISITION_LINES.PERIOD_NAME">
                        <a:mapping>
                            <a:map from="period_name" to="period_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_flag" checkedvalue="Y" uncheckedvalue="N"/>
                    <a:field name="payee_id"/>
                    <a:field name="contract_header_code" autoComplete="true" autoCompleteField="contract_number" lovGridHeight="300" lovHeight="460" lovService="csh.csh_contract_lov" lovWidth="600" prompt="CON_CONTRACT_HEADERS.CONTRACT_NUMBER" title="CON_CONTRACT_HEADERS.CONTRACT_NUMBER">
                        <a:mapping>
                            <a:map from="contract_number" to="contract_header_code"/>
                            <a:map from="contract_header_id" to="contract_header_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="contract_header_id" prompt="PAYMENT_SCHEDULE_LINE_CODE"/>
                    <a:field name="payment_schedule_line_code" autoComplete="true" autoCompleteField="payment_schedule_line_number" lovGridHeight="250" lovHeight="460" lovService="csh.csh_payment_schedule_lov" lovWidth="600" prompt="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER" title="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER">
                        <a:mapping>
                            <a:map from="payment_schedule_line_number" to="payment_schedule_line_code"/>
                            <a:map from="payment_schedule_line_id" to="payment_schedule_line_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_schedule_line_id"/>
                    <!-- <a:field name="tax_type_desc" displayField="description" options="tax_type_ds" prompt="FND_TAX_TYPE_CODES.TAX_TYPE_RATE" returnField="tax_type_id" valueField="tax_type_id"/>
                    <a:field name="tax_type_id"/> -->
                    <a:placeHolder id="accommodation_dynamicLineFields"/>
                    <a:placeHolder id="accommodation_dynamicLineFieldsObj"/>
                    <a:field name="place" autoComplete="true" autoCompleteField="place_code_name" fetchRemote="false" lovGridHeight="320" lovHeight="450" lovLabelWidth="120" lovService="expm.exp_expense_policy_place_lov" lovWidth="550" prompt="EXP_REQUISITION_LINES.PLACE_ID" required="true" title="EXP_REQUISITION_LINES.PLACE_ID">
                        <a:mapping>
                            <a:map from="place_desc" to="place"/>
                            <a:map from="place_id" to="place_id"/>
                            <a:map from="place_type_id" to="place_type_id"/>
                            <a:map from="place_type_desc" to="place_type"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="place_id"/>
                    <a:field name="place_type" autoComplete="true" autoCompleteField="place_type_code_name" lovGridHeight="300" lovHeight="450" lovLabelWidth="120" lovService="expm.exp_expense_policy_place_type_lov" lovWidth="550" prompt="EXP_REQUISITION_LINES.PLACE_TYPE_ID" title="EXP_REQUISITION_LINES.PLACE_TYPE_ID">
                        <a:mapping>
                            <a:map from="place_type_id" to="place_type_id"/>
                            <a:map from="description" to="place_type"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="place_type_id"/>
                    <a:field name="accommodation_date_from" prompt="EXP_REPORT_TRAVEL_LINES.ACCOMMODATION_DATE_FROM" required="true" validator="dateValidate"/>
                    <a:field name="accommodation_date_to" prompt="EXP_REPORT_TRAVEL_LINES.ACCOMMODATION_DATE_TO" required="true" validator="dateValidate"/>
                    <a:field name="accommodation_days" prompt="EXP_REPORT_TRAVEL_LINES.ACCOMMODATION_DAYS"/>
                    <a:field name="travel_line_category" defaultValue="ACCOMMODATION"/>
                </a:fields>
                <a:events>
                    <a:event name="update" handler="lineupdate"/>
                    <a:event name="beforecreate" handler="canaddAccomLine"/>
                    <a:event name="load" handler="lineLoadFunction"/>
                    <a:event name="remove" handler="removeAccomLine"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="other_exp_report_lines" autoQuery="true" bindName="other_lines" bindTarget="exp_report_head" fetchAll="true" model="expm.exp_report_lines" pageSize="1000" queryUrl="${/request/@context_path}/modules/expm/public/exp_report_line_query_travel.svc?exp_report_header_id=${/parameter/@exp_report_header_id}&amp;_ban_remind=Y&amp;travel_line_category=OTHER" selectable="true">
                <a:fields>
                    <a:field name="exp_report_header_id"/>
                    <a:field name="exp_report_line_id"/>
                    <a:field name="company_id"/>
                    <a:field name="company_name" autoComplete="true" autoCompleteField="company_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="exp.exp_company_tree" required="true" title="EXP_REPORT_LINES.COMPANY_ID">
                        <a:mapping>
                            <a:map from="company_short_name" to="company_name"/>
                            <a:map from="company_id" to="company_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="unit_id"/>
                    <a:field name="unit_name" autoComplete="true" autoCompleteField="unit_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="exp.exp_org_unit" required="true" title="EXP_REPORT_LINES.UNIT_ID">
                        <a:mapping>
                            <a:map from="org_unit_description" to="unit_name"/>
                            <a:map from="unit_id" to="unit_id"/>
                            <a:map from="responsibility_center_name" to="responsibility_center_name"/>
                            <a:map from="responsibility_center_id" to="responsibility_center_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="responsibility_center_id"/>
                    <a:field name="responsibility_center_name" autoComplete="true" autoCompleteField="resp_center_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="fnd.fnd_responsibility_centers_lov" required="true" title="EXP_REPORT_LINES.RESPONSIBILITY_CENTER_ID">
                        <a:mapping>
                            <a:map from="responsibility_center_name" to="responsibility_center_name"/>
                            <a:map from="responsibility_center_id" to="responsibility_center_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="position_id"/>
                    <a:field name="position_name" displayfield="position_name" options="travel_postion_ds" required="true" returnfield="position_id" valuefield="position_id"/>
                    <a:field name="employee_id"/>
                    <a:field name="employee_name" autoComplete="true" autoCompleteField="emp_code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" lovservice="expm.exp_report_employeelist_cross_com" required="true" title="EXP_REPORT_LINES.EMPLOYEE_ID">
                        <a:mapping>
                            <a:map from="name" to="employee_name"/>
                            <a:map from="employee_id" to="employee_id"/>
                            <a:map from="position_primary" to="position_primary"/>
                            <!-- <a:map from="position_id" to="position_id"/> -->
                        </a:mapping>
                    </a:field>
                    <a:field name="position_primary"/>
                    <a:field name="currency_code"/>
                    <a:field name="exchange_rate_type"/>
                    <a:field name="exchange_rate_type_name"/>
                    <a:field name="exchange_rate_quotation"/>
                    <a:field name="exchange_rate_quotation_name"/>
                    <a:field name="exchange_rate"/>
                    <a:field name="line_number"/>
                    <a:field name="description" required="true"/>
                    <a:field name="city"/>
                    <a:field name="place" autoComplete="true" autoCompleteField="place_code_name" fetchRemote="false" lovGridHeight="320" lovHeight="450" lovLabelWidth="120" lovService="expm.exp_expense_policy_place_lov" lovWidth="550" prompt="EXP_REQUISITION_LINES.PLACE_ID" title="EXP_REQUISITION_LINES.PLACE_ID">
                        <a:mapping>
                            <a:map from="place_desc" to="place"/>
                            <a:map from="place_id" to="place_id"/>
                            <a:map from="place_type_id" to="place_type_id"/>
                            <a:map from="place_type_desc" to="place_type"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="place_id"/>
                    <a:field name="place_type" autoComplete="true" autoCompleteField="place_type_code_name" lovGridHeight="300" lovHeight="450" lovLabelWidth="120" lovService="expm.exp_expense_policy_place_type_lov" lovWidth="550" prompt="EXP_REQUISITION_LINES.PLACE_TYPE_ID" title="EXP_REQUISITION_LINES.PLACE_TYPE_ID">
                        <a:mapping>
                            <a:map from="place_type_id" to="place_type_id"/>
                            <a:map from="description" to="place_type"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="place_type_id"/>
                    <a:field name="budget_item_id"/>
                    <a:field name="date_from"/>
                    <a:field name="date_to"/>
                    <a:field name="expense_type_id"/>
                    <a:field name="expense_type_name" displayfield="expense_type_description" options="exp_expense_type_ds" required="true" returnfield="expense_type_id" valuefield="expense_type_id"/>
                    <a:field name="exp_req_item_id"/>
                    <a:field name="exp_req_item_name" displayfield="expense_item_description" options="exp_expense_item_ds" required="true" returnfield="exp_req_item_id" tipfield="expense_item_prompt" valuefield="expense_item_id"/>
                    <a:field name="price" required="true" validator="priceValidator"/>
                    <a:field name="primary_quantity" required="true"/>
                    <a:field name="report_amount" required="true"/>
                    <a:field name="report_functional_amount"/>
                    <a:field name="period_name" autoComplete="true" autoCompleteField="period_name" lovGridHeight="300" lovHeight="460" lovWidth="500" prompt="EXP_REQUISITION_LINES.PERIOD_NAME" required="true" title="EXP_REQUISITION_LINES.PERIOD_NAME">
                        <a:mapping>
                            <a:map from="period_name" to="period_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_flag" checkedvalue="Y" uncheckedvalue="N"/>
                    <a:field name="payee_id"/>
                    <a:field name="contract_header_code" autoComplete="true" autoCompleteField="contract_number" lovGridHeight="300" lovHeight="460" lovService="csh.csh_contract_lov" lovWidth="600" prompt="CON_CONTRACT_HEADERS.CONTRACT_NUMBER" title="CON_CONTRACT_HEADERS.CONTRACT_NUMBER">
                        <a:mapping>
                            <a:map from="contract_number" to="contract_header_code"/>
                            <a:map from="contract_header_id" to="contract_header_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="contract_header_id" prompt="PAYMENT_SCHEDULE_LINE_CODE"/>
                    <a:field name="payment_schedule_line_code" autoComplete="true" autoCompleteField="payment_schedule_line_number" lovGridHeight="250" lovHeight="460" lovService="csh.csh_payment_schedule_lov" lovWidth="600" prompt="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER" title="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER">
                        <a:mapping>
                            <a:map from="payment_schedule_line_number" to="payment_schedule_line_code"/>
                            <a:map from="payment_schedule_line_id" to="payment_schedule_line_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_schedule_line_id"/>
                    <!-- <a:field name="tax_type_desc" displayField="description" options="tax_type_ds" prompt="FND_TAX_TYPE_CODES.TAX_TYPE_RATE" returnField="tax_type_id" valueField="tax_type_id"/>
                    <a:field name="tax_type_id"/> -->
                    <a:field name="travel_line_category" defaultValue="OTHER"/>
                    <a:placeHolder id="other_dynamicLineFields"/>
                    <a:placeHolder id="other_dynamicLineFieldsObj"/>
                </a:fields>
                <a:events>
                    <a:event name="update" handler="lineupdate"/>
                    <a:event name="beforecreate" handler="canaddOtherLine"/>
                    <a:event name="load" handler="lineLoadFunction"/>
                    <a:event name="remove" handler="removeOtherLine"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="pmtplan_schedules_ds" autoQuery="true" bindName="pmtplan" bindTarget="exp_report_head" model="expm.exp_report_pmtplan_schedules_query" queryUrl="${/request/@context_path}/autocrud/expm.exp_report_pmtplan_schedules_query/query?exp_report_header_id=${/parameter/@exp_report_header_id}" selectable="true" submitUrl="${/request/@context_path}/autocrud/expm.update_exp_rep_pmt_schedules/batch_update">
                <a:fields>
                    <a:field name="exp_report_header_id"/>
                    <a:field name="payment_schedule_line_id"/>
                    <a:field name="line_num"/>
                    <a:field name="verification_loan"/>
                    <a:field name="company_name" prompt="EXP_REPORT_PMT_SCHEDULES.COMPANY_ID"/>
                    <a:field name="description" prompt="EXP_REPORT_PMT_SCHEDULES.DESCRIPTION"/>
                    <a:field name="currency_name" prompt="EXP_REPORT_PMT_SCHEDULES.CURRENCY" required="true"/>
                    <a:field name="currency"/>
                    <a:field name="due_amount" prompt="EXP_REPORT_PMT_SCHEDULES.DUE_AMOUNT" required="true"/>
                    <a:field name="write_off_amount" prompt="CSH_WRITE_OFF.CSH_WRITE_OFF_AMOUNT"/>
                    <a:field name="schedule_start_date" required="true"/>
                    <a:field name="schedule_due_date" required="true"/>
                    <a:field name="company_short_name" prompt="EXP_REPORT_PMT_SCHEDULES.COMPANY_ID"/>
                    <a:field name="contract_number" autoComplete="true" autoCompleteField="contract_number" lovGridHeight="300" lovHeight="460" lovService="csh.csh_contract_report_pmtplan_lov" lovWidth="500" prompt="CON_CONTRACT_HEADERS.CONTRACT_NUMBER" title="CON_CONTRACT_HEADERS.CONTRACT_NUMBER">
                        <a:mapping>
                            <a:map from="contract_number" to="contract_number"/>
                            <a:map from="contract_header_id" to="contract_header_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="contract_header_id"/>
                    <!-- <a:field name="line_number" lovGridHeight="300" lovHeight="460" lovService="csh.csh_payment_schedule_lov" lovWidth="500" prompt="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER" title="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER"> -->
                    <a:field name="line_number" autoComplete="true" autoCompleteField="payment_schedule_line_number" lovGridHeight="300" lovHeight="460" lovService="csh.csh_payment_schedule_pmtplan_lov" lovWidth="500" prompt="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER" title="CON_PAYMENT_SCHEDULES.PAYMENT_SCHEDULE_LINE_NUMBER">
                        <a:mapping>
                            <a:map from="payment_schedule_line_number" to="line_number"/>
                            <a:map from="payment_schedule_line_id" to="payment_sch_line_id"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_sch_line_id"/>
                    <a:field name="payee_type" displayField="code_value_name" options="pay_category_ds" required="true" returnField="payee_type_value" valueField="code_value"/>
                    <a:field name="payee_type_value"/>
                    <a:field name="payee_id"/>
                    <a:field name="payee_partner_name" autoComplete="true" autoCompleteField="code_name" lovGridHeight="320" lovHeight="460" lovWidth="500" required="true" title="EXP_REPORT_LINES.PAYEE_ID">
                        <a:mapping>
                            <a:map from="id" to="payee_id"/>
                            <a:map from="description" to="payee_partner_name"/>
                            <a:map from="account_name" to="account_name"/>
                            <a:map from="account_number" to="account_number"/>
                            <a:map from="bank_code" to="bank_code"/>
                            <a:map from="bank_name" to="bank_name"/>
                            <a:map from="bank_location_code" to="bank_location_code"/>
                            <a:map from="bank_location_name" to="bank_location_name"/>
                            <a:map from="province_code" to="province_code"/>
                            <a:map from="province_name" to="province_name"/>
                            <a:map from="city_code" to="city_code"/>
                            <a:map from="city_name" to="city_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="payment_method" displayField="description" options="payment_mehtod_ds" prompt="ACP.DESCRIPTION_METHOD" required="true" returnField="payment_type_id" valueField="payment_method_id"/>
                    <a:field name="payment_type_id"/>
                    <a:field name="account_number" autoComplete="true" autoCompleteField="account_number" fetchRemote="false" lovGridHeight="250" lovHeight="400" lovWidth="500" required="true" title="CSH_BANK_BALANCES.BANK_ACCOUNT_ID">
                        <a:mapping>
                            <a:map from="account_number" to="account_number"/>
                            <a:map from="account_name" to="account_name"/>
                            <a:map from="bank_code" to="bank_code"/>
                            <a:map from="bank_name" to="bank_name"/>
                            <a:map from="bank_location_code" to="bank_location_code"/>
                            <a:map from="bank_location_name" to="bank_location_name"/>
                            <a:map from="province_code" to="province_code"/>
                            <a:map from="province_name" to="province_name"/>
                            <a:map from="city_code" to="city_code"/>
                            <a:map from="city_name" to="city_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="bank_code"/>
                    <a:field name="bank_name"/>
                    <a:field name="bank_location_code"/>
                    <a:field name="bank_location_name"/>
                    <a:field name="province_code"/>
                    <a:field name="province_name"/>
                    <a:field name="city_code"/>
                    <a:field name="city_name"/>
                    <a:field name="usedes_name" autoComplete="true" autoCompleteField="code_name" lovGridHeight="300" lovHeight="460" lovService="expm.csh_payment_usedes_vl?expense_report_type_id=${/parameter/@expense_report_type_id}&amp;exp_report_header_id=${/parameter/@exp_report_header_id}" lovWidth="500" required="true" title="CSH_PAYMENT_USEDS.USEDS_CODE">
                        <a:mapping>
                            <a:map from="usedes_code" to="usedes"/>
                            <a:map from="description" to="usedes_name"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="usedes"/>
                    <a:field name="bank_id"/>
                    <a:field name="account_name" prompt="EXP_EMPLOYEE_ACCOUNTS.BANK_ACCOUNT_NAME" required="true"/>
                    <a:field name="frozen_flag" checkedValue="Y" defaultValue="N" prompt="SYS_USER.FROZEN_FLAG" uncheckedValue="N"/>
                </a:fields>
                <a:events>
                    <a:event name="update" handler="pmtlineupdate"/>
                    <a:event name="submitsuccess" handler="submit_success"/>
                    <a:event name="beforecreate" handler="pmtcanaddaline"/>
                    <a:event name="add" handler="setpmtinitdata"/>
                    <a:event name="remove" handler="remove_record"/>
                </a:events>
            </a:dataSet>
            <a:dataSet id="head_object">
                <a:datas dataSource="/model/head_object"/>
            </a:dataSet>
            <a:dataSet id="head_dimension">
                <a:datas dataSource="/model/head_dimension"/>
            </a:dataSet>
        </a:dataSets>
        <a:screenBody>
            <a:screenTopToolbar id="exp_rep_mt_standard_top_bar">
                <a:screenTitle/>
                <a:toolbarButton click="savereport" text="HAP_SAVE" width="80"/>
                <a:toolbarButton id="newreportBtn" click="newreport" text="PROMPT.CREATE" width="80"/>
                <a:toolbarButton id="createFromTravelPlanBtn" click="createFromTravelPlan" text="EXP_REPORT_TRAVEL.CREATE_FROM_TRAVEL_PLAN" width="80"/>
                <a:toolbarButton id="submitBtn" click="submitreport" text="PROMPT.SUBMIT" width="80"/>
                <a:toolbarButton id="policy" click="policyFunction" text="PROMPT.VIEW_POLICIES" width="80"/>
                <a:toolbarButton id="seeLog" click="seeLog" text="PROMPT.VIEW_LOG" width="80"/>
                <a:toolbarButton id="deletereportBtn" click="deletereport" text="HAP_DELETE_ALL_REPORT" width="80"/>
                <a:toolbarButton id="uploadFileBtn" click="uploadFile" text="ATM.UPLOAD_ATTACHMENT" width="80"/>
                <a:toolbarButton id="seeHisBtn" click="seeHistory" text="PROMPT.HISTORY" width="80"/>
            </a:screenTopToolbar>
            <a:form id="exp_rep_mt_standard_head_form" title="EXP_REPORT_CREATE.TITEL">
                <a:box id="exp_rep_mt_standard_normal_box" column="4" style="width:100%">
                    <a:textField name="exp_report_number" bindtarget="exp_report_head"/>
                    <a:textField name="exp_report_type_name" bindtarget="exp_report_head"/>
                    <a:datePicker name="exp_report_data" bindtarget="exp_report_head"/>
                    <a:numberField name="sum_amount" allowDecimals="true" allowFormat="true" bindTarget="exp_report_head"/>
                    <a:textField name="exp_report_employee_name" bindtarget="exp_report_head"/>
                    <a:comboBox name="exp_report_position" bindtarget="exp_report_head"/>
                    <a:textField name="exp_report_currency_name" bindtarget="exp_report_head"/>
                    <a:numberField name="exp_report_attach_id" allowDecimals="false" bindtarget="exp_report_head"/>
                    <a:textField name="exp_report_create_by" bindtarget="exp_report_head"/>
                    <a:comboBox name="exp_report_payment_method" bindtarget="exp_report_head"/>
                    <a:comboBox name="exp_report_payee_category_name" bindtarget="exp_report_head"/>
                    <a:lov name="exp_report_payee_name" bindtarget="exp_report_head">
                        <a:events>
                            <a:event name="commit" handler="payee_name_lov_commit"/>
                        </a:events>
                    </a:lov>
                    <a:lov name="exp_report_rate_type_name" bindtarget="exp_report_head"/>
                    <a:comboBox name="exp_report_rate_quotation_name" bindtarget="exp_report_head"/>
                    <!-- <a:textField name="exp_report_rate" bindtarget="exp_report_head"/> -->
                    <a:numberField name="exp_report_rate" bindTarget="exp_report_head"/>
                    <a:textField name="exp_report_status" bindtarget="exp_report_head">
                        <a:events>
                            <a:event name="commit" handler="headcommitpayee"/>
                        </a:events>
                    </a:textField>
                    <a:placeHolder id="dynamicHeadColumn"/>
                    <a:placeHolder id="dynamicHeadObject"/>
                </a:box>
                <a:box id="exp_rep_mt_standard_ta_box" style="width:100%">
                    <a:textArea name="exp_report_description" id="exp_rep_mt_standard_desc_ta" bindtarget="exp_report_head"/>
                </a:box>
            </a:form>
            <a:tabPanel id="line_tab" marginHeight="325" marginWidth="35">
                <a:tabs>
                    <a:tab prompt="HEC.EXP_REPORT_TRANSPORTATION_LINE_INFO" width="150">
                        <a:grid id="transportation_grid" bindTarget="transportation_exp_report_lines" marginHeight="377" navBar="true" style="margin-top:5px;margin-left:5px;">
                            <a:toolBar>
                                <a:button id="transportation_addButton" click="createTransportationLineRecord" icon="${/request/@context_path}/images/add.gif" text="HAP_NEW"/>
                                <a:button id="transportation_deleteButton" type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="line_number" align="center" editor="transportation_tf" width="50"/>
                                <a:column name="description" align="left" editor="transportation_tf" width="150"/>
                                <a:column name="transportation_desc" align="left" editor="transportation_cb" width="120"/>
                                <a:column name="departure_place" align="left" editor="transportation_lov" width="120"/>
                                <a:column name="departure_date" align="center" editor="transportation_dp" renderer="Aurora.formatDate" width="100"/>
                                <a:column name="arrival_place" align="left" editor="transportation_lov" width="120"/>
                                <a:column name="arrival_date" align="center" editor="transportation_dp" renderer="Aurora.formatDate" width="100"/>
                                <a:column name="company_name" align="left" editor="transportation_lov" width="120"/>
                                <a:column name="expense_type_name" align="left" editor="transportation_cb" width="120"/>
                                <a:column name="exp_req_item_name" align="left" editor="transportation_cb" width="120"/>
                                <a:column name="price" align="right" editor="transportation_nf" renderer="Aurora.formatMoney" width="100"/>
                                <a:column name="primary_quantity" align="right" editor="transportation_nf_int" width="100"/>
                                <a:column name="report_amount" align="right" renderer="Aurora.formatMoney" width="100"/>
                                <a:column name="report_functional_amount" align="right" renderer="setfunctionamount" width="100"/>
                                <a:column name="period_name" align="left" editor="transportation_lov" width="80"/>
                                <a:column name="responsibility_center_name" align="left" editor="transportation_lov" width="120"/>
                                <a:column name="unit_name" align="left" editor="transportation_lov" width="120"/>
                                <a:column name="employee_name" align="left" editor="transportation_lov" width="120"/>
                                <a:column name="position_name" align="left" editor="transportation_cb" width="120"/>
                                <a:placeHolder id="transportation_dynamicLineColumn"/>
                                <a:placeHolder id="transportation_dynamicLineColumnObj"/>
                            </a:columns>
                            <a:editors>
                                <a:textField id="transportation_tf"/>
                                <a:lov id="transportation_lov" lovGridHeight="320" lovHeight="450" lovWidth="500"/>
                                <a:numberField id="transportation_nf" allowNegative="false"/>
                                <a:numberField id="transportation_nf_int" allowDecimals="false" allowNegative="false"/>
                                <a:comboBox id="transportation_cb"/>
                                <a:datePicker id="transportation_dp"/>
                            </a:editors>
                            <a:events>
                                <a:event name="cellclick" handler="transportation_gridcellclick"/>
                            </a:events>
                        </a:grid>
                    </a:tab>
                    <a:tab prompt="HEC.EXP_REPORT_ACCOMMODATION_LINE_INFO" width="150">
                        <a:grid id="accommodation_grid" bindTarget="accommodation_exp_report_lines" marginHeight="377" navBar="true" style="margin-top:5px;margin-left:5px;">
                            <a:toolBar>
                                <a:button id="accommodation_addButton" click="createAccommodationLineRecord" icon="${/request/@context_path}/images/add.gif" text="HAP_NEW"/>
                                <a:button id="accommodation_deleteButton" disabled="false" type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="line_number" align="center" editor="accommodation_tf" width="50"/>
                                <a:column name="description" align="left" editor="accommodation_tf" width="150"/>
                                <a:column name="place" align="left" editor="accommodation_lov" width="120"/>
                                <a:column name="accommodation_date_from" align="center" editor="accommodation_dp" renderer="Aurora.formatDate" width="100"/>
                                <a:column name="accommodation_date_to" align="center" editor="accommodation_dp" renderer="Aurora.formatDate" width="100"/>
                                <a:column name="accommodation_days" align="center" editor="accommodation_nf_int" width="80"/>
                                <a:column name="company_name" align="left" editor="accommodation_lov" width="120"/>
                                <a:column name="expense_type_name" align="left" editor="accommodation_cb" width="120"/>
                                <a:column name="exp_req_item_name" align="left" editor="accommodation_cb" width="120"/>
                                <a:column name="price" align="right" editor="accommodation_nf" renderer="Aurora.formatMoney" width="100"/>
                                <a:column name="primary_quantity" align="right" editor="accommodation_nf_int" width="100"/>
                                <a:column name="report_amount" align="right" renderer="Aurora.formatMoney" width="100"/>
                                <a:column name="report_functional_amount" align="right" renderer="setfunctionamount" width="100"/>
                                <a:column name="period_name" align="left" editor="accommodation_lov" width="80"/>
                                <a:column name="responsibility_center_name" align="left" editor="accommodation_lov" width="120"/>
                                <a:column name="unit_name" align="left" editor="accommodation_lov" width="120"/>
                                <a:column name="employee_name" align="left" editor="accommodation_lov" width="120"/>
                                <a:column name="position_name" align="left" editor="accommodation_cb" width="120"/>
                                <a:placeHolder id="accommodation_dynamicLineColumn"/>
                                <a:placeHolder id="accommodation_dynamicLineColumnObj"/>
                            </a:columns>
                            <a:editors>
                                <a:textField id="accommodation_tf"/>
                                <a:lov id="accommodation_lov" lovGridHeight="320" lovHeight="450" lovWidth="500"/>
                                <a:numberField id="accommodation_nf" allowNegative="false"/>
                                <a:numberField id="accommodation_nf_int" allowDecimals="false" allowNegative="false"/>
                                <a:comboBox id="accommodation_cb"/>
                                <a:datePicker id="accommodation_dp"/>
                            </a:editors>
                            <a:events>
                                <a:event name="cellclick" handler="accommodation_gridcellclick"/>
                            </a:events>
                        </a:grid>
                    </a:tab>
                    <a:tab prompt="HEC.EXP_REPORT_OTHER_LINE_INFO" width="150">
                        <a:grid id="other_grid" bindTarget="other_exp_report_lines" marginHeight="377" navBar="true" style="margin-top:5px;margin-left:5px;">
                            <a:toolBar>
                                <a:button id="other_addButton" click="createOtherLineRecord" icon="${/request/@context_path}/images/add.gif" text="HAP_NEW"/>
                                <a:button id="other_deleteButton" disabled="false" type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="line_number" align="center" editor="other_tf" width="50"/>
                                <a:column name="description" align="left" editor="other_tf" width="150"/>
                                <a:column name="company_name" align="left" editor="other_lov" width="120"/>
                                <a:column name="expense_type_name" align="left" editor="other_cb" width="120"/>
                                <a:column name="exp_req_item_name" align="left" editor="other_cb" width="120"/>
                                <a:column name="price" align="right" editor="other_nf" renderer="Aurora.formatMoney" width="100"/>
                                <a:column name="primary_quantity" align="right" editor="other_nf_int" width="100"/>
                                <a:column name="report_amount" align="right" renderer="Aurora.formatMoney" width="100"/>
                                <a:column name="report_functional_amount" align="right" renderer="setfunctionamount" width="100"/>
                                <a:column name="period_name" align="left" editor="other_lov" width="80"/>
                                <a:column name="responsibility_center_name" align="left" editor="other_lov" width="120"/>
                                <a:column name="unit_name" align="left" editor="other_lov" width="120"/>
                                <a:column name="employee_name" align="left" editor="other_lov" width="120"/>
                                <a:column name="position_name" align="left" editor="other_cb" width="120"/>
                                <a:placeHolder id="other_dynamicLineColumn"/>
                                <a:placeHolder id="other_dynamicLineColumnObj"/>
                            </a:columns>
                            <a:editors>
                                <a:textField id="other_tf"/>
                                <a:lov id="other_lov" lovGridHeight="320" lovHeight="450" lovWidth="500"/>
                                <a:numberField id="other_nf" allowNegative="false"/>
                                <a:numberField id="other_nf_int" allowDecimals="false" allowNegative="false"/>
                                <a:comboBox id="other_cb"/>
                            </a:editors>
                            <a:events>
                                <a:event name="cellclick" handler="other_gridcellclick"/>
                            </a:events>
                        </a:grid>
                    </a:tab>
                    <a:tab prompt="HEC.EXP_REPORT_PMT_LINE_INFO" width="150">
                        <a:grid id="pmt_grid" bindTarget="pmtplan_schedules_ds" marginHeight="377" navBar="true" style="margin-top:5px;margin-left:5px;">
                            <a:toolBar>
                                <a:button type="add"/>
                                <a:button type="delete"/>
                            </a:toolBar>
                            <a:columns>
                                <a:column name="line_num" align="center" prompt="CSH_CASH_PLAN_LINES.LINE_NUMBER" renderer="line_number" width="50"/>
                                <a:column name="verification_loan" align="center" prompt="EXP_REPORT_PMTPLAN_SCHEDULES.VERIFICATION_LOAN" renderer="edit_function_grop" width="80"/>
                                <a:column name="write_off_amount" align="right" renderer="Aurora.formatMoney" width="100"/>
                                <a:column name="description" align="left" editor="pmt_tf" width="150"/>
                                <a:column name="due_amount" align="right" editor="pmt_nf" renderer="Aurora.formatMoney" width="100"/>
                                <a:column name="payee_type" align="left" editor="pmt_combox" prompt="EXP_REPORT_HEADERS.PAYEE_CATEGORY" width="120"/>
                                <a:column name="payee_partner_name" align="left" editor="pmt_lov" prompt="ACP_INVOICE_HEADERS.PAYEE_ID" width="120"/>
                                <a:column name="account_number" align="left" editor="pmt_lov" prompt="EXP_EMPLOYEE.BANK_ACCOUNT" width="120"/>
                                <a:column name="account_name" align="left" editor="pmt_tf" prompt="CSH_BANK_BALANCES.BANK_ACCOUNT_ID" width="120"/>
                                <a:column name="payment_method" align="left" editor="pmt_combox" prompt="EXP_REPORT_HEADERS.PAYMENT_METHOD" width="120"/>
                                <a:column name="usedes_name" align="left" editor="pmt_lov" prompt="CSH_PAYMENT_USEDS.USEDS_CODE" width="120"/>
                                <a:column name="contract_number" align="left" editor="pmt_lov" width="120"/>
                                <a:column name="line_number" align="left" editor="pmt_lov" width="120"/>
                                <a:column name="frozen_flag" align="center" editor="pmt_checkbox" width="50"/>
                                <a:column name="bank_id" align="center" prompt="CSH_PAYMENT.BANK_ACCOUNT_CODE" renderer="bankAssign" width="80"/>
                            </a:columns>
                            <a:editors>
                                <a:comboBox id="pmt_combox"/>
                                <a:textField id="pmt_tf"/>
                                <a:lov id="pmt_lov" lovGridHeight="320" lovHeight="450" lovWidth="500"/>
                                <a:datePicker id="schedule_start_date_dp"/>
                                <a:datePicker id="schedule_due_date_dp"/>
                                <a:checkBox id="pmt_checkbox"/>
                                <a:numberField id="pmt_nf"/>
                            </a:editors>
                            <a:events>
                                <a:event name="cellclick" handler="pmtGridcellclick"/>
                            </a:events>
                        </a:grid>
                    </a:tab>
                </a:tabs>
            </a:tabPanel>
        </a:screenBody>
        <script><![CDATA[
            function init() {
            
                required_req('${/model/head_data/record/@req_required_flag}' == 'Y');
            
                var t = $('exp_report_head').getAt(0);
                var r = t.getMeta();
                var f1 = r.getField('exp_report_rate_type_name');
                var f2 = r.getField('exp_report_rate_quotation_name');
                var f3 = r.getField('exp_report_rate');
            
                //初始化收款方查询lov
                var payee_category = t.get('exp_report_payee_category');
                var exp_report_payee_name = t.getField('exp_report_payee_name');
                if (payee_category == null || payee_category == undefined || payee_category == '') {
                    exp_report_payee_name.setReadOnly(true);
                    exp_report_payee_name.setLovService('');
                } else if (payee_category == 'EMPLOYEE') {
                    exp_report_payee_name.setReadOnly(false);
                    exp_report_payee_name.setLovService('expm.exp_employee_req_lov');
                    exp_report_payee_name.setTitle('${l:EXP_EMPLOYEES.QUERY}');
                } else if (payee_category == 'VENDER') {
                    exp_report_payee_name.setReadOnly(false);
                    exp_report_payee_name.setTitle('${l:VENDER_SEARCH}');
                    exp_report_payee_name.setLovService('expm.exp_vender_req_lov');
                } else {
                    exp_report_payee_name.setReadOnly(false);
                    exp_report_payee_name.setTitle('${l:EXP_EMPLOYEES.QUERY}');
                    exp_report_payee_name.setLovService('expm.exp_customer_req_lov');
                }
            
                if (t.get('exp_report_currency_code') != t.get('functional_currency_code')) {
                    var rateMethodCode = '${/model/exchange_type/record/@rate_method_code}';
                    var meta = t.getMeta();
                    if (rateMethodCode == 'DAILY' || rateMethodCode == 'FIXED') {
                        meta.getField('exp_report_rate_type_name').setRequired(true);
                        meta.getField('exp_report_rate_quotation_name').setReadOnly(true);
                        meta.getField('exp_report_rate').setReadOnly(true);
                    } else {
                        meta.getField('exp_report_rate_type_name').setReadOnly(false);
                        meta.getField('exp_report_rate_type_name').setRequired(true);
                        meta.getField('exp_report_rate_quotation_name').setRequired(true);
                    }
                    if (exp_report_header_id_bak == '') {
                        t.set('exp_report_rate_type_name', '${/model/exchange_type/record/@type_name}');
                        t.set('exp_report_rate_type', '${/model/exchange_type/record/@value_code}');
                        getExchangeRate({
                            fromCur: t.get('functional_currency_code'),
                            toCur: t.get('exp_report_currency_code'),
                            exchangeRateType: '${/model/exchange_type/record/@value_code}',
                            exchangeDate: t.get('exp_report_data'),
                            periodName: t.get('period_name')
                        });
                    }
            
                } else {
                    f1.setReadOnly(true);
                    f2.setReadOnly(true);
                    f3.setReadOnly(true);
                    f3.setRequired(true);
                    t.set('exp_report_rate', 1, false);
                }
                if (t.get('exp_report_payee_category') == 'EMPLOYEE') {
                    if (exp_report_header_id_bak == '') {
                        t.set('exp_report_payee_id', '${/parameter/@employee_id}');
                        t.set('exp_report_payee_name', t.get('exp_report_employee_name'));
                    }
                }
                if (exp_report_header_id_bak != '') {
                    r.getField('exp_report_data').setReadOnly(true);
                    r.getField('exp_report_payment_method').setReadOnly(true);
                    r.getField('exp_report_position').setReadOnly(true);
                    r.getField('exp_report_payee_category_name').setReadOnly(true);
                    r.getField('exp_report_payee_name').setReadOnly(true);
                    for (var fieldName in t.data) {
                        if (fieldName != "exp_report_description" && fieldName != "exp_report_attach_id") {
            
                            r.getField(fieldName).setReadOnly(true);
                        }
                    }
                    f1 = r.getField('exp_report_payee_name');
                    var payee_category = t.get('exp_report_payee_category');
                    if (payee_category == 'EMPLOYEE') {
                        f1.setLovService('expm.exp_employee_req_lov');
                    } else if (payee_category == 'VENDER') {
                        f1.setLovService('expm.exp_vender_req_lov');
                    } else {
                        f1.setLovService('expm.exp_customer_req_lov');
                    }
            
                    //document.getElementById('createFromTravelPlanBtn').style.display = "none";
                } else {
            
                    f1 = r.getField('exp_report_payee_name');
                    f1.setReadOnly(false);
                    var payee_category = t.get('exp_report_payee_category');
                    if (payee_category == 'EMPLOYEE') {
                        f1.setLovService('expm.exp_employee_req_lov');
                        f1.setMapping([{
                            from: 'employee_id',
                            to: 'exp_report_payee_id'
                        }, {
                            from: 'name',
                            to: 'payee_name'
                        }, {
                            from: 'code_name',
                            to: 'exp_report_payee_name'
                        }]);
                    } else if (payee_category == 'VENDER') {
                        f1.setLovService('expm.exp_vender_req_lov');
                        f1.setMapping([{
                            from: 'vender_id',
                            to: 'exp_report_payee_id'
                        }, {
                            from: 'vender_name',
                            to: 'payee_name'
                        }, {
                            from: 'code_name',
                            to: 'exp_report_payee_name'
                        }]);
                    } else {
                        f1.setLovService('expm.exp_customer_req_lov');
                        f1.setMapping([{
                            from: 'customer_id',
                            to: 'exp_report_payee_id'
                        }, {
                            from: 'customer_name',
                            to: 'payee_name'
                        }, {
                            from: 'code_name',
                            to: 'exp_report_payee_name'
                        }]);
                    }
                    Ext.get('deletereportBtn').hide();
                    Ext.get('uploadFileBtn').hide();
                    Ext.get('seeHisBtn').hide();
                    Ext.get('seeLog').hide();
                    Ext.get('submitBtn').hide();
                    Ext.get('policy').hide();
                }
                lineNum = $('exp_report_head').getAt(0).get('line_number');
                lineNum = lineNum > 0 ? lineNum : 0;
                getpmtdate();
            }
            init();
            
            new function() {
                if ('${/model/check_log_count/record/@check_count}' > 0) {
                    $('seeLog').el.setStyle('color', 'red');
                } else {
                    $('seeLog').el.setStyle('color', '');
                }
            }();
        ]]></script>
        <script purpose="auto_resize"><![CDATA[
            function expRepMTStandardInitSize() {
                //描述宽度
                var labelWidth = 75;
                //标签宽度,5 = 3padding + 2border-spacing
                var tagWidth = 150 + 5;
                //页面宽度、高度
                var vw = $A.getViewportWidth();
                //留白宽度
                var marginWidth = 35 ;
                //自适应宽度
                var autoWidth = vw - marginWidth;
                //Form内部宽度，-2border
                var formInnerWidth = autoWidth - 2;
                //所占列数
                var colSpan = 4;
                //设置组件的自适应宽度
                Ext.get('exp_rep_mt_standard_head_form').setWidth(autoWidth + 4);
                $('line_tab').setWidth(autoWidth + 4);
                $('transportation_grid').setWidth(autoWidth + 4 - 17);
                $('accommodation_grid').setWidth(autoWidth + 4 - 17);
                $('other_grid').setWidth(autoWidth + 4 - 17);
                $('pmt_grid').setWidth(autoWidth + 4 - 17);
                //设置TextArea的自适应宽度,别问我最后那个6是哪里来的，试出来的
                Ext.get('exp_rep_mt_standard_desc_ta').setWidth(formInnerWidth - (formInnerWidth / colSpan - labelWidth - tagWidth) - labelWidth - 6);
            }
            //Ext.fly(window).on('resize', expRepMTStandardInitSize);
            expRepMTStandardInitSize();
        ]]></script>
    </a:view>
    <a:view-config>
        <c:batch-config source="/model/head_dimension" targetId="dynamicHeadColumn">
            <a:lov name="${@dimension_code}" bindTarget="exp_report_head_dimension" lovGridHeight="320" lovHeight="450" lovWidth="500"/>
        </c:batch-config>
        <c:create-config targetId="dynamicHeadFields">
            <p:loop source="/model/head_dimension">
                <c:process-config>
                    <a:field name="${@dimension_code}" autoComplete="true" autoCompleteField="code_name" defaultValue="${@value_description}" lovGridHeight="320" lovHeight="450" lovService="expm.EXP2110.exp_rep_ref_dimension_dvc_lov?dimension_id=${@dimension_id}&amp;enabled_flag=Y" lovWidth="500" prompt="${@description}" required="true" title="${@description}">
                        <a:mapping>
                            <a:map from="dimension_value_code" to="dimension_value_code"/>
                            <a:map from="dimension_value_id" to="${@dimension_code1}"/>
                            <a:map from="description" to="${@dimension_code}"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="${@dimension_code1}" defaultValue="${@default_dim_value_id}"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <c:create-config targetId="dynamicHeadObject">
            <p:loop source="/model/head_object">
                <p:switch test="@expense_object_method">
                    <p:case value="VALUE_LIST">
                        <c:process-config>
                            <a:lov name="${@expense_object_type_code}" bindTarget="exp_report_head_object" lovGridHeight="320" lovHeight="450" lovWidth="500"/>
                        </c:process-config>
                    </p:case>
                    <p:case value="SQL_TEXT">
                        <c:process-config>
                            <a:lov name="${@expense_object_type_code}" bindTarget="exp_report_head_object" lovGridHeight="320" lovHeight="450" lovWidth="500"/>
                        </c:process-config>
                    </p:case>
                    <p:case value="DESC_TEXT">
                        <c:process-config>
                            <a:textField name="${@expense_object_type_code}" bindTarget="exp_report_head_object"/>
                        </c:process-config>
                    </p:case>
                </p:switch>
            </p:loop>
        </c:create-config>
        <c:create-config targetId="dynamicHeadObjects">
            <p:loop source="/model/head_object">
                <c:process-config>
                    <a:field name="${@expense_object_type_code}" defaultValue="${@default_object_desc}" lovGridHeight="320" lovHeight="450" lovUrl="${/request/@context_path}/modules/expm/public/exp_req_ref_obj_sql_query_lov.screen?expense_object_type_id=${@expense_object_type_id}" lovWidth="500" prompt="${@description}" required="${@required_flag}" title="${@description}">
                        <a:mapping>
                            <a:map from="id" to="${@forname}"/>
                            <a:map from="description" to="${@expense_object_type_code}"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="${@forname}" defaultValue="${@default_object_id}"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <!-- 行程行维度动态列 -->
        <c:batch-config source="/model/transportation_line_dimension" targetId="transportation_dynamicLineColumn">
            <a:column name="${@dimension_code}" align="center" editor="transportation_lov" prompt="${@description}"/>
        </c:batch-config>
        <!-- 行程行维度的Field动态列 -->
        <c:create-config targetId="transportation_dynamicLineFields">
            <p:loop source="/model/transportation_line_dimension">
                <c:process-config>
                    <a:field name="${@dimension_code}" defaultValue="${@value_description}" lovGridHeight="320" lovHeight="450" lovService="expm.EXP2110.exp_rep_ref_dimension_dvc_lov?dimension_id=${@dimension_id}&amp;enabled_flag=Y" lovWidth="500" prompt="${@description}" required="true" title="${@description}">
                        <a:mapping>
                            <a:map from="dimension_value_code" to="dimension_value_code"/>
                            <a:map from="dimension_value_id" to="${@dimension_code1}"/>
                            <a:map from="description" to="${@dimension_code}"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="${@dimension_code1}" defaultValue="${@default_dim_value_id}"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <!-- 行程行费用对象的Field动态列 -->
        <c:create-config targetId="transportation_dynamicLineFieldsObj">
            <p:loop source="/model/transportation_line_object">
                <c:process-config>
                    <a:field name="${@expense_object_type_code}" defaultValue="${@default_object_desc}" lovGridHeight="320" lovHeight="450" lovUrl="${/request/@context_path}/modules/expm/public/exp_req_ref_obj_sql_query_lov.screen?expense_object_type_id=${@expense_object_type_id}" lovWidth="500" prompt="${@description}" required="${@required_flag}" title="${@description}">
                        <a:mapping>
                            <a:map from="id" to="${@forname}"/>
                            <a:map from="description" to="${@expense_object_type_code}"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="${@forname}" defaultValue="${@default_object_id}"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <!-- 行程行费用对象动态列 -->
        <c:create-config targetId="transportation_dynamicLineColumnObj">
            <p:loop source="/model/transportation_line_object">
                <p:switch test="@expense_object_method">
                    <p:case value="VALUE_LIST">
                        <c:process-config>
                            <a:column name="${@expense_object_type_code}" align="center" editor="transportation_lov"/>
                        </c:process-config>
                    </p:case>
                    <p:case value="SQL_TEXT">
                        <c:process-config>
                            <a:column name="${@expense_object_type_code}" align="center" editor="transportation_lov"/>
                        </c:process-config>
                    </p:case>
                    <p:case value="DESC_TEXT">
                        <c:process-config>
                            <a:column name="${@expense_object_type_code}" align="center" editor="transportation_tf"/>
                        </c:process-config>
                    </p:case>
                </p:switch>
            </p:loop>
        </c:create-config>
        <!-- 住宿行维度动态列 -->
        <c:batch-config source="/model/accommodation_line_dimension" targetId="accommodation_dynamicLineColumn">
            <a:column name="${@dimension_code}" align="center" editor="accommodation_lov" prompt="${@description}"/>
        </c:batch-config>
        <!-- 住宿行维度的Field动态列 -->
        <c:create-config targetId="accommodation_dynamicLineFields">
            <p:loop source="/model/accommodation_line_dimension">
                <c:process-config>
                    <a:field name="${@dimension_code}" defaultValue="${@value_description}" lovGridHeight="320" lovHeight="450" lovService="expm.EXP2110.exp_rep_ref_dimension_dvc_lov?dimension_id=${@dimension_id}&amp;enabled_flag=Y" lovWidth="500" prompt="${@description}" required="true" title="${@description}">
                        <a:mapping>
                            <a:map from="dimension_value_code" to="dimension_value_code"/>
                            <a:map from="dimension_value_id" to="${@dimension_code1}"/>
                            <a:map from="description" to="${@dimension_code}"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="${@dimension_code1}" defaultValue="${@default_dim_value_id}"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <!-- 住宿行费用对象的Field动态列 -->
        <c:create-config targetId="accommodation_dynamicLineFieldsObj">
            <p:loop source="/model/accommodation_line_object">
                <c:process-config>
                    <a:field name="${@expense_object_type_code}" defaultValue="${@default_object_desc}" lovGridHeight="320" lovHeight="450" lovUrl="${/request/@context_path}/modules/expm/public/exp_req_ref_obj_sql_query_lov.screen?expense_object_type_id=${@expense_object_type_id}" lovWidth="500" prompt="${@description}" required="${@required_flag}" title="${@description}">
                        <a:mapping>
                            <a:map from="id" to="${@forname}"/>
                            <a:map from="description" to="${@expense_object_type_code}"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="${@forname}" defaultValue="${@default_object_id}"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <!-- 住宿行费用对象动态列 -->
        <c:create-config targetId="accommodation_dynamicLineColumnObj">
            <p:loop source="/model/accommodation_line_object">
                <p:switch test="@expense_object_method">
                    <p:case value="VALUE_LIST">
                        <c:process-config>
                            <a:column name="${@expense_object_type_code}" align="center" editor="accommodation_lov"/>
                        </c:process-config>
                    </p:case>
                    <p:case value="SQL_TEXT">
                        <c:process-config>
                            <a:column name="${@expense_object_type_code}" align="center" editor="accommodation_lov"/>
                        </c:process-config>
                    </p:case>
                    <p:case value="DESC_TEXT">
                        <c:process-config>
                            <a:column name="${@expense_object_type_code}" align="center" editor="accommodation_tf"/>
                        </c:process-config>
                    </p:case>
                </p:switch>
            </p:loop>
        </c:create-config>
        <!-- 其他行维度动态列 -->
        <c:batch-config source="/model/other_line_dimension" targetId="other_dynamicLineColumn">
            <a:column name="${@dimension_code}" align="center" editor="other_lov" prompt="${@description}"/>
        </c:batch-config>
        <!-- 其他行维度的Field动态列 -->
        <c:create-config targetId="other_dynamicLineFields">
            <p:loop source="/model/other_line_dimension">
                <c:process-config>
                    <a:field name="${@dimension_code}" defaultValue="${@value_description}" lovGridHeight="320" lovHeight="450" lovService="expm.EXP2110.exp_rep_ref_dimension_dvc_lov?dimension_id=${@dimension_id}&amp;enabled_flag=Y" lovWidth="500" prompt="${@description}" required="true" title="${@description}">
                        <a:mapping>
                            <a:map from="dimension_value_code" to="dimension_value_code"/>
                            <a:map from="dimension_value_id" to="${@dimension_code1}"/>
                            <a:map from="description" to="${@dimension_code}"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="${@dimension_code1}" defaultValue="${@default_dim_value_id}"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <!-- 其他行费用对象的Field动态列 -->
        <c:create-config targetId="other_dynamicLineFieldsObj">
            <p:loop source="/model/other_line_object">
                <c:process-config>
                    <a:field name="${@expense_object_type_code}" defaultValue="${@default_object_desc}" lovGridHeight="320" lovHeight="450" lovUrl="${/request/@context_path}/modules/expm/public/exp_req_ref_obj_sql_query_lov.screen?expense_object_type_id=${@expense_object_type_id}" lovWidth="500" prompt="${@description}" required="${@required_flag}" title="${@description}">
                        <a:mapping>
                            <a:map from="id" to="${@forname}"/>
                            <a:map from="description" to="${@expense_object_type_code}"/>
                        </a:mapping>
                    </a:field>
                    <a:field name="${@forname}" defaultValue="${@default_object_id}"/>
                </c:process-config>
            </p:loop>
        </c:create-config>
        <!-- 其他行费用对象动态列 -->
        <c:create-config targetId="other_dynamicLineColumnObj">
            <p:loop source="/model/other_line_object">
                <p:switch test="@expense_object_method">
                    <p:case value="VALUE_LIST">
                        <c:process-config>
                            <a:column name="${@expense_object_type_code}" align="center" editor="other_lov"/>
                        </c:process-config>
                    </p:case>
                    <p:case value="SQL_TEXT">
                        <c:process-config>
                            <a:column name="${@expense_object_type_code}" align="center" editor="other_lov"/>
                        </c:process-config>
                    </p:case>
                    <p:case value="DESC_TEXT">
                        <c:process-config>
                            <a:column name="${@expense_object_type_code}" align="center" editor="other_tf"/>
                        </c:process-config>
                    </p:case>
                </p:switch>
            </p:loop>
        </c:create-config>
    </a:view-config>
</a:screen>
